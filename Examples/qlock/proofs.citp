*** ----------------------------------------------------------------------------
*** TOP: If a process/agent is in the critical section, then it is at the top of waiting queue.
*** ----------------------------------------------------------------------------
goal TOP is
|-{QLOCK}
  fm forall {S:Sys, I:X$Pid}
     top(queue(S:Sys)) = I:X$Pid if pc(S:Sys, I:X$Pid) = cs
     [metadata "top"] .
endg

begin proof PR-TOP of TOP
  ind(S:Sys) tc ca imp red push-all red
  init-all push-all red
qed

*** ----------------------------------------------------------------------------
*** MEX: Only one agent can be in the critical section at a given moment.
*** ----------------------------------------------------------------------------
goal MEX is
  fm forall {S:Sys, I:X$Pid}
     top(queue(S:Sys)) = I:X$Pid if pc(S:Sys, I:X$Pid) = cs
     [metadata("top")] .
|-{QLOCK}
  fm forall {S:Sys, I:X$Pid, J:X$Pid}
     I:X$Pid = J:X$Pid if pc(S:Sys, I:X$Pid)= cs /\ pc(S:Sys, J:X$Pid) = cs
     [metadata("mex")] .
endg

begin proof PR-MEX of MEX
  tc imp conj push-all
  init-all push-all red
qed

*** ----------------------------------------------------------------------------
*** INV1 : reset(S:Sys) is reachable from S:Sys.
*** ----------------------------------------------------------------------------

goal INV1 is
|-{RESET}
  fm forall {S:Sys} reset(S:Sys) => S:Sys [metadata("inv1")] .
endg

begin proof PI1 of INV1
  tc ca red
qed

*** ----------------------------------------------------------------------------
*** INV2: One application of reset removes the first element of the waiting queue.
*** ----------------------------------------------------------------------------

goal INV2 is
|-{RESET}
  fm forall {S:Sys} queue(reset(S:Sys)) = get(queue(S:Sys)) [metadata("inv2")] .
endg

begin proof PI2 of INV2
  tc ca red
qed

*** ----------------------------------------------------------------------------
*** LIVE: Given any state S:Sys and any natural number N:Nat
*** there exists a reachable state R:Sys from S:Sys such that
*** queue(R:Sys) is obtained from queue(S:Sys) by removing the first N elements.
*** ----------------------------------------------------------------------------

goal LIVE is
  fm forall {S:Sys} reset(S:Sys) => S:Sys [metadata("inv1")] .
  fm forall {S:Sys} queue(reset(S:Sys)) = get(queue(S:Sys)) [metadata("inv2")] .
|-{RESET}
  fm forall {N:Nat, S:Sys}
     exists {R:Sys} R:Sys => S:Sys /\ queue(R:Sys) = get(queue(S:Sys), N:Nat)
     [metadata "live"].
endg

begin proof PL of LIVE
  subst(R:Sys <- reset(S:Sys, N:Nat))
  ind(N:Nat) red
  tc conj push-all red
qed

*** ----------------------------------------------------------------------------
