in ../../Tool/citp
in gcd-assoc-prelude

fmod ASSOC-PRE is
    protecting NAT-GCD .
    protecting NAT-OPS-EXTRA .

    vars M N P : Nat .

    ceq M divides N = true if (M divides P) = true /\ (P divides N) = true [ metadata "Lemma-18" nonexec ] .
    ceq M = N if (M divides N) = true /\ (N divides M) = true [ metadata "Lemma-21" nonexec ] .
    eq gcd(M, N) divides M = true [ metadata "Lemma-23l" ] .
    eq gcd(M, N) divides N = true [ metadata "Lemma-23r" ] .
    ceq M divides gcd(N, P) = true if (M divides N) = true /\ (M divides P) = true [ metadata "Lemma-25" ] .
endfm

select #CITP# .
loop init .
		
---> Proof score of Assoc: \forall M, N, P : Nat . gcd(gcd(M, N), P) = gcd(M, gcd(N, P)) .
(goal ASSOC-PRE |- eq gcd(gcd(M:Nat, N:Nat), P:Nat) = gcd(M:Nat, gcd(N:Nat, P:Nat)) ;)
(tc)
(init Lemma-18 by M:Nat <- gcd(gcd(M#1,N#2),P#3); N:Nat <- N#2 ; P:Nat <- gcd(M#1,N#2))
(init Lemma-18 by M:Nat <- gcd(gcd(M#1,N#2),P#3); N:Nat <- M#1 ; P:Nat <- gcd(M#1,N#2))
(init Lemma-18 by M:Nat <- gcd(M#1,gcd(N#2,P#3)); N:Nat <- N#2 ; P:Nat <- gcd(N#2,P#3))
(init Lemma-18 by M:Nat <- gcd(M#1,gcd(N#2,P#3)); N:Nat <- P#3 ; P:Nat <- gcd(N#2,P#3))
(init Lemma-21 by M:Nat <- gcd(gcd(M#1,N#2),P#3); N:Nat <- gcd(M#1,gcd(N#2,P#3)))
(red)
---> QED

fmod LEMMA-18-PRE is
    protecting NAT-OPS-EXTRA .

    vars M N P : Nat .

    ceq M * pdiv(N, M) = N if (M divides N) = true [ metadata "rl-Divides" ] .
    ceq M divides N = true if N = M * P [ metadata "Lemma-20" nonexec ] .
endfm

select #CITP# .
loop init .

---> Proof score of Lemma 18: \forall M, N, P : Nat . (M divides N) if (M divides P) /\ (P divides N) .
(goal LEMMA-18-PRE |- ceq (M:Nat divides N:Nat) = true if (M:Nat divides P:Nat) = true /\ (P:Nat divides N:Nat) = true ;)
(tc imp)
(init Lemma-20 by M:Nat <- M#1 ; N:Nat <- N#2 ; P:Nat <- pdiv(P#3, M#1) * pdiv(N#2, P#3))
(red)
---> QED

fmod LEMMA-20-PRE is
    protecting NAT-OPS-EXTRA .

    vars M N : Nat .
    
    eq pdiv(M + (M * N), s N) = M [ metadata "Lemma-13" ] .
endfm
		
select #CITP# .
loop init .

---> Proof score of Lemma 20: \forall M, N, P : Nat . (M divides N) if (N = M * P) .
(goal LEMMA-20-PRE |- ceq M:Nat divides N:Nat = true if N:Nat = M:Nat * P:Nat [ nonexec ] ;)
(ind on M:Nat)
(tc)
(select 2)
(. init Divides by M:Nat <- 0 ; N:Nat <- 0)
(imp red)
(init Divides by M:Nat <- s x#1 ; N:Nat <- N#2)
(red)
---> QED

fmod LEMMA-13-PRE is
    protecting NAT-OPS-EXTRA .

    vars M N : Nat .
    
    eq psub(M + N, N) = M [ metadata "Lemma-10" ] .
endfm
		
select #CITP# .
loop init .

---> Proof score of Lemma 13: \forall M, N : Nat . pdiv(M + M * N, s N) = M .
(goal LEMMA-13-PRE |- eq pdiv(M:Nat + (M:Nat * N:Nat), s N:Nat) = M:Nat ;)
(ind on M:Nat)
(red)
---> QED

---> Proof score of Lemma 10: \forall M, N : Nat . psub(M + N, N) = M .
(goal NAT-OPS-EXTRA |- eq psub(M:Nat + N:Nat, N:Nat) = M:Nat ;)
(ind on N:Nat)
(tc red)
---> QED
