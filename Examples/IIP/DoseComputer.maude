*** Model of an Insulin-Pump Dose Computer
*** 
*** based on case study from Ian Sommerville's book on
*** Software Engineering (10th edition)
*** https://iansommerville.com/software-engineering-book/
***
*** The dose computer maintains a log of blood-sugar levels and of the
*** corresponding insulin doses administered.  Based on the log, the
*** computer determines, for a new reading of the blood-sugar level,
*** an appropriate amount of insulin to be delivered to the user.

in SimpleList

fmod SUGAR-LEVEL is
    sort SLevel .
    ops low safe high : -> SLevel [ ctor ] .
endfm

fmod READING is *** should be a theory
    protecting NAT * (
    sort Nat to Reading,
    sort Zero to ZReading,
    sort NzNat to NzReading ) .
    protecting SUGAR-LEVEL .

    var R : Reading .
    
    ops safeMin safeMax : -> Reading .
    eq safeMin <= safeMax = true .

    *** test values
    eq safeMin = 6 .
    eq safeMax = 14 .
    *** end

    op level_ : Reading -> SLevel .
    ceq level R = low  if R < safeMin .
    ceq level R = safe if R >= safeMin /\ R <= safeMax .
    ceq level R = high if R >= safeMax .
endfm

view Reading from TRIV to READING is
    sort Elt to Reading .
endv

fmod DOSE is *** should be a theory
    protecting NAT * (
    sort Nat to Dose,
    sort Zero to ZDose,
    sort NzNat to NzDose ) .

    op minDose : -> Dose .
    
    *** test values
    eq minDose = 1 .
    op maxDose : -> Dose .
    eq maxDose = 4 .
    *** end
endfm

fmod RECORDING is
    protecting READING + DOSE .
    sort Recording .

    op [_~_] : Reading Dose -> Recording [ ctor ] .

    var R : Reading .
    var D : Dose .

    op reading_ : Recording -> Reading .
    eq reading [R ~ D] = R .

    op dose_ : Recording -> Dose .
    eq dose [R ~ D] = D .
endfm

view Recording from TRIV to RECORDING is
    sort Elt to Recording .
endv

fmod LOG is
    protecting SIMPLE-LIST{Recording} * (
    sort List{Recording} to Log,
    sort NeList{Recording} to NeLog,
    op nil to empty ).
endfm

fmod CALC is
    protecting LOG .

    vars R R' R'' : Reading .
    vars D D' D'' : Dose .
    vars RD RD' : Recording .
    vars L L' : Log .

    op valueOf : Reading -> Dose .
    eq valueOf(0) = 0 .
    eq valueOf(s R) = s valueOf(R) .

    op relativeDose : Reading Reading -> Dose .
    eq relativeDose(R, R') = valueOf(sd(R, R') quo 4) .

    op dose : Reading Log -> Dose .

    *** The measured sugar level falls below the minimum value
    ceq dose(R, L) = 0
      if level R = low [ metadata "CA-D-Low" ] .

    *** The measured sugar level falls within the safe range
    *** -- the log is empty
    ceq dose(R, L) = 0
      if level R = safe
          /\ L := empty [ metadata "CA-D-Safe-Init" ] .
    *** -- the log is not empty; the sugar level decreases
    ceq dose(R, L) = 0
      if level R = safe
          /\ RD, L' := L
          /\ R <= reading RD [ metadata "CA-D-Safe-Dec" ] .
    *** -- the log is not empty; the sugar level increases, but there
    ***    is not enough data in the log to determine if the increase
    ***    is accelerating or not
    ceq dose(R, L) = minDose
      if level R = safe
          /\ RD, empty := L
          /\ R > reading RD [ metadata "CA-D-Safe-IInc" ] .
    *** -- the log is not empty; the sugar level increases, but the
    ***    rate of increase is decreasing
    ceq dose(R, L) = 0
      if level R = safe
          /\ RD, RD', L' := L
          /\ R > reading RD
          /\ sd(R, reading RD) < sd(reading RD, reading RD')
          [ metadata "CA-D-Safe-NAInc" ] .
    *** -- the log is not empty; the sugar level increases, and the
    ***    rate of increase is stable or increasing
    ceq dose(R, L) = max(minDose, relativeDose(R, reading RD))
      if level R = safe
          /\ RD, RD', L' := L
          /\ R > reading RD
          /\ sd(R, reading RD) >= sd(reading RD, reading RD')
          [ metadata "CA-D-Safe-AInc" ] .
    *** The measured sugar level is above the maximum value
    *** -- the log is empty
    ceq dose(R, L) = minDose
      if level R = high
          /\ L := empty [ metadata "CA-D-High-Init" ] .
    *** -- the log is not empty; the sugar level increases
    ceq dose(R, L) = max(minDose, relativeDose(R, reading RD))
      if level R = high
          /\ RD, L' := L
          /\ R >= reading RD [ metadata "CA-D-High-Inc" ] .
    *** -- the log is not empty; the sugar level decreases, but there
    ***    is not enough data in the log to determine if the decrease
    ***    is accelerating or not
    ceq dose(R, L) = 0
      if level R = high
          /\ RD, empty := L
          /\ R < reading RD [ metadata "CA-D-High-IDec" ] .
    *** -- the log is not empty; the sugar level decreases, but the
    ***    rate of decrease is decreasing as well
    ceq dose(R, L) = minDose
      if level R = high
          /\ RD, RD', L' := L
          /\ R < reading RD
          /\ sd(R, reading RD) < sd(reading RD, reading RD')
          [ metadata "CA-D-High-NADec" ] .
    *** -- the log is not empty; the sugar level decreases, and the
    ***    rate of decrease is stable or increasing
    ceq dose(R, L) = 0
      if level R = high
          /\ RD, RD', L' := L
          /\ R < reading RD
          /\ sd(R, reading RD) >= sd(reading RD, reading RD')
          [ metadata "CA-D-High-ADec" ] .
endfm

*** A list of blood-sugar readings is admissible if the difference
*** between any two consecutive readings is at most 1 (for testing
*** purposes; later to be replaced with a loose constant).

fmod ADMISSIBLE-READINGS is
    protecting SIMPLE-LIST{Reading} .

    vars R R' : Reading .
    var LR : List{Reading} .

    sorts NeALR ALR .
    subsort NeALR < NeList{Reading} ALR < List{Reading} .

    mb nil : ALR [ metadata "ctor-ALR-0" ] .
    mb R, nil : NeALR [ metadata "ctor-ALR-1" ] .
    cmb R, R', LR : NeALR
      if sd(R, R') <= 1
          /\ R', LR : ALR [ metadata "ctor-ALR-*" ] .
endfm

fmod LOG-READINGS is
    protecting CALC .
    protecting ADMISSIBLE-READINGS .

    var R : Reading .
    var LR : List{Reading} .
    var RD : Recording .
    var L : Log .
    
    op readings_ : Log -> List{Reading} .
    eq readings empty = nil .
    eq readings (RD, L) = reading RD, readings L .

    op log_ : ALR -> Log .
    eq log nil     = empty .
    eq log (R, LR) = [R ~ dose(R, log LR)], log LR .
endfm
