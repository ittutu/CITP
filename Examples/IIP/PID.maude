*** Enhanced PID model of an Insulin-Pump Dose Computer
*** 
*** based on the paper "The Effect of Insulin Feedback on Closed Loop
*** Glucose Control", by Steil et al., published in The Journal of
*** Clinical Endocrinology & Metabolism, doi:10.1210/jc.2010-2578
***
*** The dose computer maintains a log of blood-sugar levels and of the
*** corresponding insulin doses administered.  Based on the log, the
*** computer determines, for a new reading of the blood-sugar level,
*** an appropriate amount of insulin to be delivered to the user.

fmod READING is *** should be a theory
    protecting RAT .

    op target : -> PosRat .
    op basalRate : -> PosRat .

    *** test values
    eq target = 90 . *** mg/dl
    eq basalRate = 0 . *** iU
    *** end
endfm

view Reading from TRIV to READING is
    sort Elt to Rat .
endv

fmod DOSE is *** should be a theory
    protecting RAT .
endfm

fmod RECORDING is
    protecting READING + DOSE .
    sort Recording .

    *** A recording is a pair of the form [R ~ D], where
    *** R is a reading of the glucose level (mg/dl), and
    *** D is the insulin dose administered (iU).
    op [_~_] : Rat Rat -> Recording [ ctor ] .

    var R : Rat .
    var D : Rat .

    op reading_ : Recording -> Rat .
    eq reading [R ~ D] = R .

    op dose_ : Recording -> Rat .
    eq dose [R ~ D] = D .
endfm

view Recording from TRIV to RECORDING is
    sort Elt to Recording .
endv

fmod LOG is
    protecting SIMPLE-LIST{Recording} * (
    sort List{Recording} to Log,
    sort NeList{Recording} to NeLog,
    op nil to empty ).
endfm

fmod CALC is
    protecting LOG .

    vars R R' R'' : Rat . *** readings
    vars D D' D'' : Rat . *** doses
    vars RD RD' : Recording .
    vars L L' : Log .

    *** Error value
    *** corresponds to the difference between the measured glucose
    *** level (mg/dl) and the daytime target (90 mg/dl)
    *** [delta : Reading -> Dose]
    op delta : Rat -> Rat .
    eq delta(R) = R - target .

    *** PID parameters (to be tuned)
    *** Kp: proportional gain
    *** Ti: daytime integration time (min)
    *** Td: daytime derivative time (min)
    ops Kp Ti Td : -> PosRat .

    *** test values
    op DIR : -> PosRat . *** daily insulin requirement (U/kg)
    eq DIR = 64 / 100 .
    eq Kp = DIR / 135 .
    eq Ti = 450 .
    eq Td = 90 .
    *** end

    *** Proportional term
    *** [P : Reading -> Dose]
    op P : Rat -> Rat .
    eq P(R) = Kp * delta(R) .

    *** Integral term
    *** [I : Reading Log -> Dose]
    op I : Rat Log -> Rat .
    eq I(R, empty) = (Kp / Ti) * delta(R).
    eq I(R, (RD, L)) = I(R, L) + (Kp / Ti) * delta(reading RD) .

    *** Derivative term
    *** [D : Reading Log -> Dose]
    op D : Rat Log -> Rat .
    eq D(R, empty) = Kp * Td * delta(R) .
    eq D(R, (RD, L)) = Kp * Td * (R - reading RD) .

    *** PK-model parameters (to be tuned)
    ops K0 K1 K2 gamma : -> Rat .

    *** test values
    eq K0 = (1 - K1) + K2 .
    eq K1 = 1966308 / 1000000 .
    eq K2 = 966584 / 1000000 .
    eq gamma = 1 / 2 .
    *** end

    *** Real-time estimate of insulin concentration
    *** [IC : Log -> Dose]
    op IC : Log -> Rat .
    eq IC(empty) = basalRate .
    eq IC(RD, empty) = basalRate . *** ???
    eq IC(RD, RD', L') = K0 * (dose RD) + K1 * IC(RD', L') + K2 * IC(L') .

    *** Computed dose
    *** [dose : Reading Log -> Dose]
    op dose : Rat Log -> Rat .
    eq dose(R, L) =
        (1 + gamma) * (P(R) + I(R, L) + D(R, L)) - gamma * IC(L) .
endfm

fmod ADMISSIBLE-READINGS is
    protecting SIMPLE-LIST{Reading} .

    vars R R' : Rat .
    var LR : List{Reading} .

    sorts NeALR ALR .
    subsort NeALR < NeList{Reading} ALR < List{Reading} .

    mb nil : ALR [ metadata "ctor-ALR-0" ] .
    mb R, nil : NeALR [ metadata "ctor-ALR-1" ] .
    cmb R, R', LR : NeALR
      if abs(R - R') <= 6
          /\ R', LR : ALR [ metadata "ctor-ALR-*" ] .
endfm

fmod LOG-READINGS is
    protecting CALC .
    protecting ADMISSIBLE-READINGS .

    var R : Rat .
    var LR : List{Reading} .
    var RD : Recording .
    var L : Log .
    
    op readings_ : Log -> List{Reading} .
    eq readings empty = nil .
    eq readings (RD, L) = reading RD, readings L .

    op log_ : ALR -> Log .
    eq log nil     = empty .
    eq log (R, LR) = [R ~ dose(R, log LR)], log LR .
endfm

red log (120, 142, 126, 101, 96, nil) .
