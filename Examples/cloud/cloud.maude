fmod EQUAL is
 op _=?_ :  Universal Universal -> Bool  [comm prec 51 poly (1 2) metadata "equality"].
endfm

fmod LABELC is
 inc EQUAL .
 sort LabelC .
 ops free busy : -> LabelC .
 ceq true = false if free = busy .
---
 vars A B : LabelC .
 eq A =? A = true .
 eq free =? busy = false .
endfm

fmod LABELP is
 inc EQUAL .
 sort Label .
 ops idle gotval updated : -> Label .
 ceq true = false if idle = gotval .
 ceq true = false if idle = updated .
 ceq true = false if gotval = updated . 
---
 vars A B : Label .
 eq A =? A = true .
 eq idle =? gotval = true .
 eq idle =? updated = false .
 eq gotval =? updated = false .
endfm

fth CLIENT is 
 inc EQUAL .
 sort Client .
 vars I J : Client .
 eq I =? I = true .
ceq I = J if I =? J [nonexec]. 
endfth

fmod SYSTEM{X :: CLIENT} is
 sort Sys .
*** constructors ***
 op init : -> Sys [ctor].
 ops modval getval update gotoidle : Sys X$Client -> Sys [ctor].
endfm

*** CLOUD{X} has loose semantics ***
fmod CLOUD{X :: CLIENT} is 
 pr SYSTEM{X}.
 pr LABELC .
 pr LABELP .
 pr NAT .
*** lemma ***
 eq (N:Nat <= N:Nat) = true . 
*** observers ***
 op statusc : Sys -> LabelC .
 op valc : Sys -> Nat .
 op statusp : Sys X$Client -> Label .
 op valp : Sys X$Client -> Nat .
 op tmp : Sys X$Client -> Nat .
*** undefined function ***
 op new : Sys X$Client -> Nat .
*** variables ***
 var S : Sys . vars I J : X$Client .
*** init ***
 eq statusc(init) = free .
 eq statusp(init,I) = idle .
*** modval ***
 eq statusc(modval(S,I)) = statusc(S) .
 eq valc(modval(S,I)) = valc(S) .
---
 eq statusp(modval(S,I),J) = statusp(S,J) .
---
 ceq valp(modval(S,I),J) = new(S,I)  if J = I /\ statusp(S,I) = idle[metadata "ca:1"].
 ceq valp(modval(S,I),J) = valp(S,J) if J =? I = false              [metadata "ca:2"].
 ceq valp(modval(S,I),J) = valp(S,J) if statusp(S,I) =? idle = false[metadata "ca:3"].
---
 eq tmp(modval(S,I),J) = tmp(S,J) .
   
*** getval ***
 ceq statusc(getval(S,I)) = busy if statusp(S,I) = idle /\ statusc(S) = free[metadata "ca:1"].
 ceq statusc(getval(S,I)) = statusc(S) if statusp(S,I) =? idle = false      [metadata "ca:2"].
 ceq statusc(getval(S,I)) = statusc(S) if statusc(S) =? free = false        [metadata "ca:3"].
---
 eq valc(getval(S,I)) = valc(S) .
---
 ceq statusp(getval(S,I),J)= gotval      if J = I /\ statusp(S,I)= idle /\ statusc(S)= free[metadata "ca:1"].
 ceq statusp(getval(S,I),J)= statusp(S,J)if J =? I = false              [metadata "ca:2"].
 ceq statusp(getval(S,I),J)= statusp(S,J)if statusp(S,I) =? idle = false[metadata "ca:3"].
 ceq statusp(getval(S,I),J)= statusp(S,J)if statusc(S) =? free = false  [metadata "ca:4"].
---
 eq valp(getval(S,I),J) = valp(S,J) .
---
 ceq tmp(getval(S,I),J)= valc(S) if J = I /\ statusp(S,I)= idle /\ statusc(S)= free[metadata "ca:1"].
 ceq tmp(getval(S,I),J)= tmp(S,J)if J =? I = false              [metadata "ca:2"].
 ceq tmp(getval(S,I),J)= tmp(S,J)if statusp(S,I) =? idle = false[metadata "ca:3"].
 ceq tmp(getval(S,I),J)= tmp(S,J)if statusc(S) =? free = false  [metadata "ca:4"].

*** update ***
 eq statusc(update(S,I)) = statusc(S) .
---
 ceq valc(update(S,I)) = valp(S,I)if statusc(S)= busy /\ statusp(S,I)= gotval /\ tmp(S,I)<= valp(S,I)[metadata "ca:1"].
 ceq valc(update(S,I)) = valc(S)  if statusc(S) =? busy = false     [metadata "ca:2"].
 ceq valc(update(S,I)) = valc(S)  if statusp(S,I) =? gotval = false [metadata "ca:3"].
 ceq valc(update(S,I)) = valc(S)  if valp(S,I) < tmp(S,I)           [metadata "ca:4"].
---
 ceq statusp(update(S,I),J)= updated if J = I /\ statusp(S,I)= gotval /\ statusc(S)= busy[metadata "ca:1"].
 ceq statusp(update(S,I),J)= statusp(S,J) if J =? I = false                [metadata "ca:2"].
 ceq statusp(update(S,I),J)= statusp(S,J) if statusp(S,I) =? gotval = false[metadata "ca:3"]. 
 ceq statusp(update(S,I),J)= statusp(S,J) if statusc(S) =? busy = false    [metadata "ca:4"].
---
 ceq valp(update(S,I),J) = tmp(S,J) if J = I /\ statusp(S,I)= gotval /\ statusc(S)= busy /\ valp(S,I)< tmp(S,I)[metadata "ca:1"].
 ceq valp(update(S,I),J) = valp(S,J)if J =? I = false               [metadata "ca:2"].
 ceq valp(update(S,I),J) = valp(S,J)if statusp(S,I)=? gotval = false[metadata "ca:3"].
 ceq valp(update(S,I),J) = valp(S,J)if statusc(S) =? busy = false   [metadata "ca:4"].
 ceq valp(update(S,I),J) = valp(S,J)if tmp(S,I) <= valp(S,I)        [metadata "ca:5"].
--- 
 ceq tmp(update(S,I),J) = valp(S,J)if J = I /\ statusp(S,I)= gotval /\ statusc(S)= busy /\ tmp(S,I)<= valp(S,I) [metadata "ca:1"].
 ceq tmp(update(S,I),J) = tmp(S,J) if J =? I = false                [metadata "ca:2"].
 ceq tmp(update(S,I),J) = tmp(S,J) if statusp(S,I)=? gotval = false [metadata "ca:3"].
 ceq tmp(update(S,I),J) = tmp(S,J) if statusc(S)=? busy = false     [metadata "ca:4"] .
 ceq tmp(update(S,I),J) = tmp(S,J) if valp(S,I)< tmp(S,I)           [metadata "ca:5"].

*** gotoidle ***
 ceq statusc(gotoidle(S,I)) = free      if statusc(S)= busy /\ statusp(S,I)= updated[metadata "ca:1"].
 ceq statusc(gotoidle(S,I)) = statusc(S)if statusc(S) =? busy = false      [metadata "ca:2"].
 ceq statusc(gotoidle(S,I)) = statusc(S)if statusp(S,I) =? updated = false [metadata "ca:3"].
---
 eq valc(gotoidle(S,I)) = valc(S).
---
 ceq statusp(gotoidle(S,I),J) = idle if J = I /\ statusp(S,I) = updated /\ statusc(S)= busy[metadata "ca:1"].
 ceq statusp(gotoidle(S,I),J) = statusp(S,J) if J =? I = false                [metadata "ca:2"].
 ceq statusp(gotoidle(S,I),J) = statusp(S,J) if statusp(S,I)=? updated = false[metadata "ca:3"].
 ceq statusp(gotoidle(S,I),J) = statusp(S,J) if statusc(S)=? busy = false     [metadata "ca:4"].
---
 eq valp(gotoidle(S,I),J) = valp(S,J).
---
 ceq tmp(gotoidle(S,I),J) = 0         if J = I /\ statusp(S,I) = updated /\ statusc(S)= busy[metadata "ca:1"].
 ceq tmp(gotoidle(S,I),J) = tmp(S,J)  if J =? I = false                [metadata "ca:2"].
 ceq tmp(gotoidle(S,I),J) = tmp(S,J)  if statusp(S,I)=? updated = false[metadata "ca:3"].
 ceq tmp(gotoidle(S,I),J) = tmp(S,J)  if statusc(S)=? busy = false     [metadata "ca:4"].
*** *** ***
endfm
