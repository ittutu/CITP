*** -----------------------------------------------------------------------------
*** For CLOUD, we are interested in proving the following invariant property:
*** any PC in the updated state has a value equal to the value stored in Cloud.

*** This is achieved in three main steps, each introduced by a goal.
*** -----------------------------------------------------------------------------


*** ----------------------------------------------------------------------------
*** Step I. The following five invariants are proved by simultaneous induction:
*** 1) If the status of a PC is updated, then the status of Cloud cannot be free.
*** 2) If the status of a PC is gotval then the status of Cloud cannot be free.
*** 3) There cannot be two PCs with the statuses updated and gotval.
*** 4) There cannot be two different PCs with the status gotval.
*** 5) There cannot be two different PCs with the status updated.

goal INV.12345 is
|-{CLOUD}
fm forall {S:Sys, I:X$Client, J:X$Client}
     (true = false
      if statusp(S:Sys, I:X$Client) = updated
         /\ statusc(S:Sys) = free) /\
     (true = false
      if statusp(S:Sys, I:X$Client) = gotval
         /\ statusc(S:Sys) = free) /\
     (true = false
      if statusp(S:Sys, I:X$Client) = updated
         /\ statusp(S:Sys, J:X$Client) = gotval) /\
     (true = false
      if (I:X$Client =? J:X$Client) = false
         /\ statusp(S:Sys, J:X$Client) = gotval
         /\ statusp(S:Sys, I:X$Client)= gotval) /\	 
     (true = false
      if (I:X$Client =? J:X$Client) = false
         /\ statusp(S:Sys, J:X$Client) = updated
         /\ statusp(S:Sys, I:X$Client) = updated)
   [metadata "inv"] .
endg

begin proof PI.12345 of INV.12345
  ind(S:Sys) conj red
  tc ca red ca red
  imp conj push-all red
  init-all
qed

*** -----------------------------------------------------------------------------
*** Step II. We prove another invariant using the invariant 4 as lemma:
*** 6) If a PC has the status gotval, then its temporal value is equal to the value of the Cloud ***


goal INV.6 is
  fm true = false
     if (I:X$Client =? J:X$Client) = false
         /\ statusp(S:Sys, J:X$Client) = gotval
         /\ statusp(S:Sys, I:X$Client) = gotval
     [nonexec metadata "inv4"] .
|-{CLOUD}
  fm forall {S:Sys, I:X$Client}
     tmp(S:Sys, I:X$Client) = valc(S:Sys)
     if statusp(S:Sys, I:X$Client) = gotval
     [metadata "inv6"].
endg

begin proof PI.6 of INV.6
  ind(S:Sys)
  tc red ca red ca red
  imp push-all red
  init-all
qed

*** -----------------------------------------------------------------------------
*** III. The desired property is proved using invariants 3 and 6 as lemmas:
*** 7) If the status of a PC is updated, then its value is equal to that of the Cloud.
*** -----------------------------------------------------------------------------

goal INV.7 is
  fm true = false
     if N:Nat <= M:Nat = true /\ M:Nat < N:Nat = true
     [nonexec metadata "lemma-nat"] .
  fm true = false
     if statusp(S:Sys, I:X$Client) = updated
        /\ statusp(S:Sys, J:X$Client) = gotval
     [nonexec metadata "inv3"] .
  fm tmp(S:Sys, I:X$Client) = valc(S:Sys)
     if statusp(S:Sys, I:X$Client) = gotval
     [metadata "inv6"] .
|-{CLOUD}
  fm forall {S:Sys,I:X$Client}
     valp(S:Sys, I:X$Client) = valc(S:Sys)
     if statusp(S:Sys, I:X$Client) = updated
     [metadata "inv7"] .
endg

begin proof PI.7 of INV.7
  ind(S:Sys) red
  tc red ca red ca red ca red
  imp push-all red
  pull("inv6") init-all
qed

*** -----------------------------------------------------------------------------