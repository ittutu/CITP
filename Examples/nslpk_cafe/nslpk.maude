fmod PRIN is   *** Should be a theory
  inc BOOL .

  sort Prin .
  op intr : -> Prin .

  var P : Prin .

  op _~_ : Prin Prin -> Bool [comm] .
  eq P ~ P = true .
endfm

fmod RAND is   *** Should be a theory
  inc BOOL .

  sort Rand .

  op seed : -> Rand .
  op next : Rand -> Rand .

  vars R R1 R2 : Rand .

  op _~_ : Rand Rand -> Bool [comm] .

  eq R ~ R = true .
  eq (seed ~ next(R1)) = false .
  eq (R1 ~ next(R1)) = false .
  eq (next(R1) ~ next(R2)) = (R1 ~ R2) .
endfm

fmod NONCE is               *** Should be NONCE{P :: PRIN, R :: RAND} is
  pr PRIN + RAND .

  sort Nonce .

  op n : Prin Prin Rand -> Nonce [ctor] .
  op p1 : Nonce -> Prin .
  op p2 : Nonce -> Prin .
  op r  : Nonce -> Rand .

  vars P1 P2 P12 P22 : Prin .
  vars R1 R2 : Rand .
  var  N : Nonce .

  op _~_ : Nonce Nonce -> Bool [comm] .
  eq N ~ N = true .
  eq (n(P1,P2,R1) ~ n(P12,P22,R2)) = (P1 ~ P12 and P2 ~ P22 and R1 ~ R2) .

  eq p1(n(P1,P2,R1)) = P1 .
  eq p2(n(P1,P2,R1)) = P2 .
  eq r(n(P1,P2,R1))  = R1 .

  ***(
  op _\in_ : Prin Nonce -> Bool .
  eq P1 \in n(P1, P2, R1) = true .
  eq P2 \in n(P1, P2, R1) = true .
  ceq P \in n(P1, P2, R1) = false
   if (P ~ P1) = false /\
      (P ~ P2) = false .
  )
endfm

fmod CIPHER is             *** Should be CIPHER{P :: PRIN, R :: RAND} is
  pr NONCE .               *** NONCE{P, R} .

  sorts Cipher1 Cipher2 Cipher3 Cipher .
  subsort Cipher1 Cipher2 Cipher3 < Cipher .

  op enc1 : Prin Nonce Prin -> Cipher1 [ctor] .
  op enc2 : Prin Nonce Nonce Prin -> Cipher2 [ctor] .
  op enc3 : Prin Nonce -> Cipher3 [ctor] .

  op k    : Cipher -> Prin .
  op n1   : Cipher -> Nonce .
  op n2   : Cipher2 -> Nonce .
  op p    : Cipher1 -> Prin .
  op p    : Cipher2 -> Prin .

  vars N1 N2 N11 N21 N12 N22 : Nonce .
  vars K1 K2 : Prin .
  vars P1 P2 : Prin .

  op _~_ : Cipher Cipher -> Bool [comm] .
  eq (enc1(K1,N11,P1) ~ enc1(K2,N12,P2)) = (K1 ~ K2 and N11 ~ N12 and P1 ~ P2) .
  eq (enc1(K1,N11,P1) ~ enc2(K2,N12,N22,P2)) = false .
  eq (enc1(K1,N11,P1) ~ enc3(K2,N12)) = false .
  eq (enc2(K1,N11,N21,P1) ~ enc2(K2,N12,N22,P2)) = (K1 ~ K2 and N11 ~ N12 and N21 ~ N22 and P1 ~ P2) .
  eq (enc2(K1,N11,N21,P1) ~ enc3(K2,N12)) = false .
  eq (enc3(K1,N11) ~ enc3(K2,N12)) = (K1 ~ K2 and N11 ~ N12) .

  eq k(enc1(K1,N1,P1)) = K1 .
  eq k(enc2(K1,N1,N2,P1)) = K1 .
  eq k(enc3(K1,N1)) = K1 .
  eq n1(enc1(K1,N1,P1)) = N1 .
  eq n1(enc2(K1,N1,N2,P1)) = N1 .
  eq n1(enc3(K1,N1)) = N1 .
  eq n2(enc2(K1,N1,N2,P1)) = N2 .
  eq p(enc1(K1,N1,P1)) = P1 .
  eq p(enc2(K1,N1,N2,P1)) = P1 .
endfm

*** Adrian: Theory defined to require operator _~_
fth TRIV-EQ is
 inc BOOL .

 sort Elt .

 op _~_ : Elt Elt -> Bool .
 eq E:Elt ~ E:Elt = true .
endfth

fmod BAG {T :: TRIV-EQ} is
  sort Bag .
  subsort T$Elt < Bag .

  op empty : -> Bag [ctor] . *** ctor attribute added
  op __ : Bag Bag -> Bag [ctor assoc comm id: empty] .
  ***  eq (empty S) = S . *** Added as attribute

  vars X Y : T$Elt .
  var  S : Bag .

  op _\in_ : T$Elt Bag -> Bool .
  eq X \in empty = false .
  eq X \in Y = (X ~ Y) .
  eq X \in (Y S) = (X ~ Y) or (X \in S) .
endfm

view TRIV2NONCE from TRIV-EQ to NONCE is
  sort Elt to Nonce .
endv

fmod NONCE-BAG is
  pr BAG{TRIV2NONCE} * (sort Bag to NonceBag) .
endfm

view TRIV2CIPHER from TRIV-EQ to CIPHER is
  sort Elt to Cipher .
endv

fmod NETWORK is
  pr BAG{TRIV2CIPHER} * (sort Bag to Network) .
endfm

fmod NSLPK is               *** Should be a theory
  pr (NONCE-BAG + NETWORK) .
  sort Sys .

  --- an arbitrary initial state
  op init : -> Sys [ctor] .
  --- transitions
  op send1 : Sys Prin Prin -> Sys [ctor] .
  op send2 : Sys Prin Prin Nonce -> Sys [ctor] .
  op send3 : Sys Prin Prin Nonce Nonce -> Sys [ctor] .
  op fake1 : Sys Prin Prin Nonce -> Sys [ctor] .
  op fake2 : Sys Prin Prin Nonce Nonce -> Sys [ctor] .
  op fake3 : Sys Prin Nonce -> Sys [ctor] .

  --- observers
  op rand   : Sys -> Rand .       *** Next random number available in the system.
  op nw     : Sys -> Network .    *** Ciphers in the system.
  op nonces : Sys -> NonceBag .   *** Nonces addressed to the intruder in the system.

  --- CafeOBJ variables
  var S : Sys .
  vars P1 P2 P3 Q1 : Prin .
  vars N1 N2 : Nonce .

  --- init
  eq rand(init)   = seed .
  eq nw(init)     = empty .
  eq nonces(init) = empty .

  --- send1
  eq rand(send1(S,P1,P2))   = next(rand(S)) .
  eq nw(send1(S,P1,P2))     = (enc1(P2,n(P1,P2,rand(S)),P1) nw(S)) .
  eq nonces(send1(S,P1,P2))
     = (if P2 ~ intr then (n(P1,P2,rand(S)) nonces(S)) else nonces(S) fi) .

  --- send2
  op c-send2 : Sys Prin Prin Nonce -> Bool .
  eq c-send2(S,P1,P2,N1) = enc1(P1,N1,P2) \in nw(S) .
  ---
  ceq rand(send2(S,P1,P2,N1))   = next(rand(S)) if c-send2(S,P1,P2,N1) .
  ceq nw(send2(S,P1,P2,N1))
      = (enc2(P2,N1,n(P1,P2,rand(S)),P1) nw(S)) if c-send2(S,P1,P2,N1) .
  ceq nonces(send2(S,P1,P2,N1))
      = (if P2 ~ intr then (N1 n(P1,P2,rand(S)) nonces(S)) else nonces(S) fi)
      if c-send2(S,P1,P2,N1) .
  ceq send2(S,P1,P2,N1)         = S if not c-send2(S,P1,P2,N1) .

  --- send3
  op c-send3 : Sys Prin Prin Nonce Nonce -> Bool .
  eq c-send3(S,P1,P2,N1,N2) = enc2(P1,N1,N2,P2) \in nw(S) and enc1(P2,N1,P1) \in nw(S) .
  ---
  eq  rand(send3(S,P1,P2,N1,N2))   = rand(S) .
  ceq nw(send3(S,P1,P2,N1,N2))     = (enc3(P2,N2) nw(S)) if c-send3(S,P1,P2,N1,N2) .
  ceq nonces(send3(S,P1,P2,N1,N2))
      = (if P2 ~ intr then (N2 nonces(S)) else nonces(S) fi)
      if c-send3(S,P1,P2,N1,N2) .
  ceq send3(S,P1,P2,N1,N2)         = S if not c-send3(S,P1,P2,N1,N2) .

  --- fake1
  op c-fake1 : Sys Prin Prin Nonce -> Bool .
  eq c-fake1(S,P1,P2,N1) = N1 \in nonces(S) .
  ---
  eq  rand(fake1(S,P1,P2,N1))   = rand(S) .
  ceq nw(fake1(S,P1,P2,N1))     = (enc1(P2,N1,P1) nw(S)) if c-fake1(S,P1,P2,N1) .
  eq  nonces(fake1(S,P1,P2,N1)) = nonces(S) .
  ceq fake1(S,P1,P2,N1)         = S if not c-fake1(S,P1,P2,N1) .

  --- fake2  P2 (intr) -> P1
  op c-fake2 : Sys Prin Prin Nonce Nonce -> Bool .
  eq c-fake2(S,P1,P2,N1,N2) = N1 \in nonces(S) and N2 \in nonces(S) .
  ---
  eq  rand(fake2(S,P1,P2,N1,N2))   = rand(S) .
  ceq nw(fake2(S,P1,P2,N1,N2))     = (enc2(P1,N1,N2,P2) nw(S)) if c-fake2(S,P1,P2,N1,N2) .
  eq  nonces(fake2(S,P1,P2,N1,N2)) = nonces(S) .
  ceq fake2(S,P1,P2,N1,N2)         = S if not c-fake2(S,P1,P2,N1,N2) .

  --- fake3
  *** enc3 has an extra Prin
  op c-fake3 : Sys Prin Nonce -> Bool .
  eq c-fake3(S,P1,N1) = N1 \in nonces(S) .
  ---
  eq  rand(fake3(S,P1,N1))   = rand(S) .
  ceq nw(fake3(S,P1,N1))     = (enc3(P1,N1) nw(S)) if c-fake3(S,P1,N1) .
  eq  nonces(fake3(S,P1,N1)) = nonces(S) .
  ceq fake3(S,P1,N1)         = S if not c-fake3(S,P1,N1) .

  ---
  --- properties to be verified
  ---
  op inv1 : Sys Nonce -> Bool .
  eq inv1(S,N1) = ((N1 \in nonces(S)) implies (p1(N1) ~ intr or p2(N1) ~ intr)) .
  op inv2 : Sys Nonce Prin -> Bool .
  eq inv2(S,N1,Q1)
     = ((enc1(Q1,N1,intr) \in nw(S))
        implies (p1(N1) ~ intr or p2(N1) ~ intr or N1 \in nonces(S))) .
  op inv3 : Sys Nonce Nonce Prin -> Bool .
  eq inv3(S,N1,N2,Q1)
     = ((enc2(Q1,N1,N2,intr) \in nw(S))
        implies (p1(N2) ~ intr or p2(N2) ~ intr or N2 \in nonces(S))) .
endfm
