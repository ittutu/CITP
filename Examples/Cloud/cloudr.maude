
fmod C-LABEL is
 sort C-Status .
 ops idlec busy : -> C-Status [ctor].
--- contradiction ---
 ceq true = false if idlec = busy [metadata "c-contr"]. 
endfm

fmod PAIR {X :: TRIV, Y :: TRIV} is
 sort Pair .
 op <_`,_> : X$Elt Y$Elt -> Pair [ctor].
endfm

view TRIV2C-LABEL from TRIV to C-LABEL is
 sort Elt to C-Status .
endv

view TRIV2NAT from TRIV to NAT is
 sort Elt to Nat .
endv
--- -----------------------------------------------------
fmod C-PAIR is
 pr PAIR{TRIV2C-LABEL,TRIV2NAT} * (sort Pair to C-Pair).
endfm
--- -----------------------------------------------------
fmod P-LABEL is
 sort P-Status .
 ops  idlep gotvalue updated : -> P-Status .
 ceq true = false if idlep = gotvalue  [metadata "p-contr1"].
 ceq true = false if idlep = updated   [metadata "p-contr2"].
 ceq true = false if gotvalue = updated[metadata "p-contr3"]. 
endfm

fmod TRIPLE{X :: TRIV, Y :: TRIV, Z :: TRIV} is
 sort Triple .
  op <_`,_`,_> : X$Elt Y$Elt Z$Elt -> Triple[ctor]. 
endfm

view TRIV2P-LABEL from TRIV to P-LABEL is
 sort Elt to P-Status .
endv

fmod P-TRIPLE is
 pr TRIPLE{TRIV2P-LABEL,TRIV2NAT,TRIV2NAT} * (sort Triple to P-Triple).
endfm

view TRIV2P-TRIPLE from TRIV to P-TRIPLE is
 sort Elt to P-Triple .
endv

fmod MSET{X :: TRIV} is
 sort MSet .
 subsort X$Elt < MSet .
 op empty : -> MSet [ctor].
 op __ : MSet MSet -> MSet [id: empty assoc comm ctor].
endfm
--- -----------------------------------------------------
fmod P-MSET is
 pr MSET{TRIV2P-TRIPLE}.
 op idlep? : MSet -> Bool .
 vars PV TMP : Nat .
 var A : MSet .
 eq idlep?(empty) = true .
 eq idlep?(< idlep,   PV,TMP > A) = idlep?(A).
 eq idlep?(< gotvalue,PV,TMP > A) = false .
 eq idlep?(< updated, PV,TMP > A) = false . 
endfm
--- -----------------------------------------------------
--- -----------------------------------------------------
fmod CLOUD is
 pr P-MSET .
 pr C-PAIR .
 sorts Init Reach Sys .
 subsorts Init < Reach < Sys .
 op `[_`,_`] : C-Pair MSet -> Sys [ctor].
---
 vars CV PV TMP NEW : Nat .
 var A : MSet .
 var CS : C-Status .
--- init ---
cmb [< idlec,CV >,A]: Init if idlep?(A) [metadata "ctor-init"].
--- modvalue ---
cmb [< CS,CV >,< idlep,NEW,TMP > A]: Reach
 if [< CS,CV >,< idlep,PV ,TMP > A] : Reach [metadata "ctor-modval" nonexec].
--- gotvalue ---
cmb [< busy, CV >,< gotvalue,NEW,CV > A]: Reach
 if [< idlec,CV >,< idlep,NEW,TMP > A] : Reach [metadata "ctor-gotval" nonexec].
--- update1 ---
cmb [< busy,NEW >,< updated,NEW,NEW > A]: Reach
 if [< busy,CV  >,< gotvalue,NEW,CV > A]: Reach /\ CV  <= NEW[metadata "ctor-updated1" nonexec].
--- update2 --- 
cmb [< busy,CV >,< updated, CV, CV > A]: Reach
 if [< busy,CV >,< gotvalue,NEW,CV > A]: Reach /\ NEW < CV   [metadata "ctor-updated2" nonexec].
--- gotoidle ---
cmb [< idlec,CV >,< idlep,  PV,0   > A]: Reach
 if [< busy, CV >,< updated,PV,TMP > A]: Reach [metadata "ctor-gotoidle" nonexec].
endfm
