---
--- A mutual exclusion protocol with test&set
---
--- Status lock = open;
--- ...
--- Loop: "Remainder Section"
---  rs: repeat while test&set(lock) = close;
---    "Critical Section"
---  cs: lock := open;
---
--- where test&set(x) atomically does the following:
--- x is set to close and the old value of x is returned.
---
--- Initially, lock is open and each process is in
--- Remainder Section (or at label rs).
---

fmod LABEL is
 sort Label .

 ops rs cs : -> Label [ctor] .
 op _~_ : Label Label -> Bool [comm] .
 eq (L:Label ~ L:Label) = true .
 ceq true = false if rs = cs .
endfm

fmod LSET is
 pr LABEL .

 sort LSet .
 subsort Label < LSet .

 op empty : -> LSet [ctor] .
 op __ : LSet LSet -> LSet [ctor assoc comm id: empty] .

 var  LS : LSet .

 op allRS : LSet -> Bool .
 eq allRS(empty) = true .
 eq allRS(rs LS) = allRS(LS) .
 eq allRS(cs LS) = false .
endfm

fmod STATUS is
 sort Status .
 ops open close : -> Status [ctor] .
 op _~_ : Status Status -> Bool [comm] .
 eq (L:Status ~ L:Status) = true .
 ceq true = false if open = close .
endfm

fmod TAS is
 pr STATUS .
 pr LSET .

 sorts Reach Sys .
 subsort Reach < Sys .

 op <_,_> : Status LSet -> Sys [ctor] .

 var  S : Status .
 var  L : Label .
 var  LS : LSet .

 cmb < open, LS > : Reach
  if allRS(LS) [nonexec metadata "ctor-init"] .
 cmb < close, cs LS > : Reach
  if < open, rs LS > : Reach [nonexec metadata "ctor-enter"] .
 cmb < open, rs LS > : Reach
  if < S, cs LS > : Reach [nonexec metadata "ctor-leave"] .
endfm
