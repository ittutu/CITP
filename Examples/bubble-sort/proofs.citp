*** ----------------------------------------------------------
*** STEP: one round/step of bubble sorting leaves the list unchanged
*** if the number of unordered pairs of consecutive elements is zero
*** ----------------------------------------------------------

goal STEP is
 fm ~ s N:Nat = 0 [metadata "nat-h1"].
 |-{BUBBLE-SORT}
 fm forall{Q:Queue} step(Q:Queue) = Q:Queue if nop(Q:Queue) = 0 [metadata "lemma2"].
endg

begin proof PR-STEP of STEP
 quasi-ind(Q:Queue) red
 ind(X#2:Queue) push-all red
 tc red ca red
 imp push-all red
qed

*** ----------------------------------------------------------
*** SMALL: smaller is invariant w.r.t. step
*** ----------------------------------------------------------

goal SMALL is
 |-{BUBBLE-SORT}
 fm forall{Q:Queue} smaller(E1:X$Elt,step(Q:Queue)) = smaller(E1:X$Elt,Q:Queue) [metadata "small"].
endg

begin proof PR-SMALL of SMALL
 quasi-ind(Q:Queue) red
 ind(X#2:Queue) push-all red
 tc red ca red ca red ca red
qed

*** ----------------------------------------------------------
*** ORDER: order decreases after one application of step
*** ----------------------------------------------------------

goal ORDER is
 fm smaller(E:X$Elt,step(Q:Queue)) = smaller(E:X$Elt,Q:Queue)  [metadata "small"].
 |-{BUBBLE-SORT}
 fm forall{Q:Queue} order(step(Q:Queue)) <= order(Q:Queue) = true [metadata "order"].
endg

begin proof PR-ORDER of ORDER
 quasi-ind(Q:Queue) red
 ind(X#2:Queue) red push-all red
 tc red ca red
qed

*** ----------------------------------------------------------
*** SORDER: order strictly decreases after one application of step
*** if the number of unordered pairs of consecutive elements is greater than zero
*** ----------------------------------------------------------

goal SORDER is
 fm smaller(E:X$Elt,step(Q:Queue)) = smaller(E:X$Elt,Q:Queue)  [metadata "smaller"].
 fm order(step(Q:Queue)) <= order(Q:Queue) = true [metadata "order"].
 |-{BUBBLE-SORT}
 fm forall{Q:Queue} order(step(Q:Queue)) < order(Q:Queue) = true if 0 < nop(Q:Queue) = true [metadata "sorder"]. 
endg

begin proof PR-SORDER of SORDER
 quasi-ind(Q:Queue) red
 ind(X#2:Queue)  red push-all red
 tc red ca red
 imp push-all red
 init("order", Q:Queue <- X#1#3 x#2) red
qed
