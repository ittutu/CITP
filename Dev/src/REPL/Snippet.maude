***( SpeX/REPL

  This file is part of REPL, a generic Read-Eval-Print-Loop library
  for Maude 3.

  Copyright : (C) 2020-2022 Simion Stoilow Institute of Mathematics
              of the Romanian Academy (IMAR)
  License   : GNU General Public License v2.0 or later (GPL-2.0-or-later)
  Author    : Ionut Tutu <Ionut.Tutu@imar.ro>

)

sload ./IO.maude
sload ../CommonLibs/Qid.maude
sload ../CommonLibs/QidList.maude
sload ../CommonLibs/StringList.maude

********************************************************************************

fth SNIPPET/IO is
  protecting STRING .

  sort Tokens .
  op nil : -> Tokens .
  op preprocess : String -> String .
  op read : String -> Tokens .
  op __ : Tokens Tokens -> Tokens [assoc id: nil] .
  op size : Tokens -> Nat .

  sorts IdxTokens Index .
  op index : Tokens -> IdxTokens .
  op end-index : IdxTokens -> Index .
  op find : IdxTokens Index -> FindResult .
  op get-prefix : String Nat -> String .

  sort Result .
  op show : Result -> String .
endfth

*** ----------------------------------------------------------------------------

fmod SNIPPET { IO :: SNIPPET/IO } is
  protecting STRING-LIST .
  protecting NAT-LIST .
  protecting STRING/OPS .
  protecting FIND-RESULT .

  vars S PS : String .
  var  SL : StringList .
  vars Z N K : Nat .
  var  NL : NatList .
  var  T : IO$Tokens .
  var  IT : IO$IdxTokens .
  var  I : IO$Index .
  var  FR : FindResult .

  *** Snippet  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  sort Snippet{IO} .
  op snippet : Nat StringList IO$Tokens -> Snippet{IO} [ctor] .

  *** nil  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op nil : -> Snippet{IO} .
  eq nil = snippet(1, nil, nil) .

  *** append  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op append : String Snippet{IO} -> Snippet{IO} .
  ceq append(S, snippet(Z, SL, T)) = snippet(Z, SL PS, T read(PS))
   if PS := preprocess(S) .

  *** flush  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op flush : Snippet{IO} -> Snippet{IO} .
  eq flush(snippet(Z, SL, T)) = snippet(Z + size(SL), nil, nil) .

  *** input  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op input : Snippet{IO} -> IO$Tokens .
  eq input(snippet(Z, SL, T)) = T .

  *** IdxSnippet  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  sort IdxSnippet{IO} .
  op snippet : Nat StringList NatList IO$IdxTokens -> IdxSnippet{IO} [ctor] .

  *** index  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op index : Snippet{IO} -> IdxSnippet{IO} .
  eq index(snippet(Z, SL, T)) = snippet(Z, SL, $map-size(SL), index(T)) .

  op $map-size : StringList -> NatList .
  eq $map-size(nil) = nil .
  eq $map-size(S SL) = size(read(S)) $map-size(SL) .

  *** line-No  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op line-No : IdxSnippet{IO} IO$Index -> Nat .
  ceq line-No(snippet(Z, SL, NL, IT), I)
   = if FR :: Nat
     then $line-No(Z, NL, FR)
     else Z + p size(SL) fi
   if FR := find(IT, I) .

  op $line-No : Nat NatList Nat -> Nat .
  eq $line-No(Z, nil, K) = Z .
  eq $line-No(Z, N NL, K)
   = if K >= N
     then $line-No(s Z, NL, sd(K, N))
     else Z fi .

  *** context  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op context : IdxSnippet{IO} IO$Index -> String .
  ceq context(snippet(Z, SL, NL, IT), I)
   = if FR :: Nat
     then $line-prefix(SL, NL, FR)
     else last-line(snippet(Z, SL, NL, IT)) fi
   if FR := find(IT, I) .

  op $line-prefix : StringList NatList Nat -> String .
  eq $line-prefix(S SL, N NL, K)
   = if K >= N
     then $line-prefix(SL, NL, sd(K, N))
     else get-prefix(S, s K) fi .
  eq $line-prefix(SL, NL, K) = "" [owise] .

  op last-line : IdxSnippet{IO} -> String .
  eq last-line(snippet(Z, nil, NL, IT)) = "" .
  eq last-line(snippet(Z, SL S, NL, IT)) = S .

  *** end-index  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op end-index : IdxSnippet{IO} -> IO$Index .
  eq end-index(snippet(Z, SL, NL, IT)) = end-index(IT) .
endfm

*** ----------------------------------------------------------------------------

view Snippet { IO :: SNIPPET/IO } from REPL/IO to SNIPPET { IO } is
  sort Accumulator to Snippet{IO} .
  sort Input to IO$Tokens .
  sort Result to IO$Result .
  sort IdxAccumulator to IdxSnippet{IO} .
  sort Index to IO$Index .
endv

********************************************************************************

fth SNIPPET/BASIC-IO is
  protecting STRING .

  sort Tokens .
  op nil : -> Tokens .
  op __ : Tokens Tokens -> Tokens .
  op size : Tokens -> Nat .

  op read : String -> Tokens .
  op show : Tokens -> String .
  op get-prefix : String Nat -> String .
endfth

*** ----------------------------------------------------------------------------

fmod SNIPPET/BASIC-IO-as-SNIPPET/IO { IO :: SNIPPET/BASIC-IO } is
endfm

view NIndex { IO :: SNIPPET/BASIC-IO } from SNIPPET/IO
to STRING/OPS + FIND-RESULT + SNIPPET/BASIC-IO-as-SNIPPET/IO { IO } is
  sort Tokens to IO$Tokens .
  op preprocess(S:String) to term trim-lnl(S:String) .

  sort IdxTokens to IO$Tokens .
  op index(T:Tokens) to term T:IO$Tokens .

  sort Index to Nat .
  op find(IT:IdxTokens, I:Index) to term I:Nat .
  op end-index(IT:IdxTokens) to term p size(IT:IO$Tokens) .

  sort Result to IO$Tokens .
  op get-prefix(S:String, N:Nat) to term get-prefix(S:String, N:Nat) .
endv

*** ----------------------------------------------------------------------------

view Snippet/IO/String from SNIPPET/BASIC-IO to STRING/OPS is
  sort Tokens to String .
  op nil to term "" .
  op T1:Tokens T2:Tokens to term T1:String + T2:String .
  op size to length .
  op read(S:String) to term S:String .
  op show(T:Tokens) to term T:String .
  op get-prefix(S:String, N:Nat) to term substr(S:String, 0, N:Nat) .
endv

*** ----------------------------------------------------------------------------

view Snippet/IO/Qid from SNIPPET/BASIC-IO to QID/CONVERSION + QID-LIST/OPS is
  sort Tokens to QidList .
  op read to tokenize .
  op show to printTokens .
  op get-prefix(S:String, N:Nat) to term
    locate(take(N:Nat, tokenize(S:String)), S:String) .
endv

********************************************************************************
