***( SpeX/Lang/Base/Common

  This file is part of the SpeX-languages suite.

  Copyright : (C) 2021 Simion Stoilow Institute of Mathematics of the
              Romanian Academy (IMAR)
  License   : GNU General Public License v2.0 or later (GPL-2.0-or-later)
  Author    : Ionut Tutu <Ionut.Tutu@imar.ro>

)

sload ./Sorts.maude
sload ./Operations.maude
sload ./Sentences.maude

********************************************************************************

fmod RENAMING-SET is
  extending META-MODULE .

  var RS : RenamingSet .

  op none : -> RenamingSet [ctor] .
  eq (RS, none) = RS .
endfm

*** ----------------------------------------------------------------------------

fmod QID/RENAMING is
  protecting QID-SET/OPS .
  protecting RENAMING-SET .

  vars QI QI' : Qid .
  var  QIS : QidSet .
  var  QIL : QidList .
  var  RS : RenamingSet .

  *** sort-renamings  - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op sort-renamings : Qid RenamingSet -> QidSet .
  eq sort-renamings(QI, sort QI to QI') = QI' .
  eq sort-renamings(QI, (sort QI to QI', RS)) = QI' ; sort-renamings(QI, RS) .
  eq sort-renamings(QI, RS) = none [owise] .

  *** remove sort renamings  - - - - - - - - - - - - - - - - - - - - - - - - - -
  op _\`sort-renaming(_) : RenamingSet Qid -> RenamingSet .
  eq (sort QI to QI') \ sort-renaming(QI) = none .
  eq (sort QI to QI', RS) \ sort-renaming(QI) = RS \ sort-renaming(QI) .
  eq RS \ sort-renaming(QI) = RS [owise] .

  *** rename-sorts  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op rename-sort : Qid RenamingSet -> Qid .
  eq rename-sort(QI, sort QI to QI') = QI' .
  ceq rename-sort(QI, (sort QI to QI', RS)) = QI'
   if sort-renamings(QI, RS) = none .
  eq rename-sort(QI, RS) = QI [owise] .

  op rename-sorts : QidSet RenamingSet -> QidSet .
  op rename-sorts : Qid RenamingSet -> Qid .
  eq rename-sorts(none, RS) = none .
  eq rename-sorts(QI ; QIS, RS)
   = rename-sort(QI, RS) ; rename-sorts(QIS, RS) .

  op rename-sorts : QidList RenamingSet -> QidList .
  eq rename-sorts(nil, RS) = nil .
  eq rename-sorts(QI QIL, RS)
   = rename-sort(QI, RS) rename-sorts(QIL, RS) .
endfm

*** ----------------------------------------------------------------------------

fmod SORT-SET-DECL/RENAMING is
  protecting SORT-SET-DECL .
  protecting QID/RENAMING .

  var SS : SortSet .
  var RS : RenamingSet .

  *** rename-sorts  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op rename-sorts : SortSetDecl RenamingSet -> SortSetDecl .
  eq rename-sorts(sorts SS ., RS) = (sorts rename-sorts(SS, RS) .) .
endfm

*** ----------------------------------------------------------------------------

fmod TERM/RENAMING is
  protecting QID/RENAMING .

  var  QI : Qid .
  var  TQ : TermQid .
  var  T : Term .
  var  TL : TermList .
  var  NTL : NeTermList .
  vars TP TP' : Type .
  var  RS : RenamingSet .

  *** rename-t(erm)l(ist)-sorts  - - - - - - - - - - - - - - - - - - - - - - - -
  op rename-tl-sorts : TermList RenamingSet -> TermList .
  ceq rename-tl-sorts(TQ, sort TP to TP')
   = TQ as TP' if getType(TQ) = TP .
  ceq rename-tl-sorts(TQ, (sort TP to TP', RS))
   = TQ as TP' if getType(TQ) = TP /\ sort-renamings(TP, RS) = none .
  eq rename-tl-sorts(QI[TL], RS) = QI[rename-tl-sorts(TL, RS)] .
  eq rename-tl-sorts((T, NTL), RS)
   = rename-tl-sorts(T, RS), rename-tl-sorts(NTL, RS) .
  eq rename-tl-sorts(TL, RS) = TL [owise] .
endfm

*** ----------------------------------------------------------------------------

fmod ATTRIBUTE/RENAMING is
  protecting TERM/RENAMING .

  var T : Term .
  var At : Attr .
  var AtS : AttrSet .
  var RS : RenamingSet .

  *** rename-sorts  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op rename-sorts : AttrSet RenamingSet -> AttrSet .
  eq rename-sorts((none).AttrSet, RS) = none .
  eq rename-sorts(id(T) AtS, RS)
   = id(rename-tl-sorts(T, RS)) rename-sorts(AtS, RS) .
  eq rename-sorts(left-id(T) AtS, RS)
   = left-id(rename-tl-sorts(T, RS)) rename-sorts(AtS, RS) .
  eq rename-sorts(right-id(T) AtS, RS)
   = right-id(rename-tl-sorts(T, RS)) rename-sorts(AtS, RS) .
  eq rename-sorts(At AtS, RS) = At rename-sorts(AtS, RS) [owise] .
endfm

*** ----------------------------------------------------------------------------

fmod OP-DECL-SET/RENAMING is
  protecting OP-DECL-SET .
  protecting ATTRIBUTE/RENAMING .

  var QI : Qid .
  var TP : Type .
  var TPL : TypeList .
  var ODS : OpDeclSet .
  var AtS : AttrSet .
  var RS : RenamingSet .

  *** rename-sorts  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op rename-sorts : OpDeclSet RenamingSet -> OpDeclSet .
  eq rename-sorts((none).OpDeclSet, RS) = none .
  eq rename-sorts(op QI : TPL -> TP [AtS] . ODS, RS)
   = (op QI : rename-sorts(TPL, RS) -> rename-sort(TP, RS)
      [rename-sorts(AtS, RS)] .) rename-sorts(ODS, RS) .
endfm

*** ----------------------------------------------------------------------------

fmod ATERM/RENAMING is
  protecting ATERM .
  protecting TERM/RENAMING .

  var  TQ : TermQid .
  var  @TQ : ATermQid .
  var  @T : ATerm .
  var  @TL : ATermList .
  var  @NTL : NeATermList .
  vars QI X : Qid .
  var  Args : ATermArgs .
  var  RS : RenamingSet .

  *** rename-t(erm)l(ist)-sorts  - - - - - - - - - - - - - - - - - - - - - - - -
  op rename-sorts : ATermList RenamingSet -> ATermList .
  eq rename-sorts({TQ : X}, RS)
   = {rename-tl-sorts(TQ, RS) : rename-sort(X, RS)} .
  eq rename-sorts({TQ : X Args}, RS)
   = {rename-tl-sorts(TQ, RS) : rename-sort(X, RS) Args} .
  eq rename-sorts({@T : X}, RS)
   = {rename-sorts(@T, RS) : rename-sort(X, RS)} .
  eq rename-sorts({@T : X Args}, RS)
   = {rename-sorts(@T, RS) : rename-sort(X, RS) Args} .
  eq rename-sorts(QI[@NTL], RS) = QI[rename-sorts(@NTL, RS)] .

  eq rename-sorts((empty).ATermList, RS) = empty .
  eq rename-sorts((@T, @NTL), RS)
   = rename-sorts(@T, RS), rename-sorts(@NTL, RS) .
endfm

*** ----------------------------------------------------------------------------

fmod SEN-DECL-SET/RENAMING is
  protecting SEN-DECL-SET .
  protecting ATERM/RENAMING .

  var E : ATerm .
  var AtS : AttrSet .
  var EDS : SenDeclSet .
  var RS : RenamingSet .

  *** rename-sorts  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op rename-sorts : SenDeclSet RenamingSet -> SenDeclSet .
  eq rename-sorts((none).SenDeclSet, RS) = none .
  eq rename-sorts(sen E [AtS] . EDS, RS)
   = sen rename-sorts(E, RS) [AtS] . rename-sorts(EDS, RS) .
endfm

********************************************************************************
