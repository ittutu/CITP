***( SpeX/CommonLibs

  This file is part of CommonLibs (CL), a suite of Maude 3 libraries
  that extend the predefined data modules from the standard prelude.

  Copyright : (C) 2020, 2021 Simion Stoilow Institute of Mathematics
              of the Romanian Academy (IMAR)
  License   : GNU General Public License v2.0 or later (GPL-2.0-or-later)
  Author    : Ionut Tutu <Ionut.Tutu@imar.ro>

)

********************************************************************************

view Oid from TRIV to CONFIGURATION is
  sort Elt to Oid .
endv

*** ----------------------------------------------------------------------------

mod OID-LIST is
  protecting LIST{Oid} *
    (sort NeList{Oid} to NeOidList, sort List{Oid} to OidList) .

  var  O : Oid .
  vars OL OL' : OidList .

  *** add  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op add : Oid OidList -> OidList .
  eq add(O, OL) = if occurs(O, OL) then OL else O OL fi .

  *** remove  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op remove : Oid OidList -> OidList .
  eq remove(O, OL O OL') = remove(O, OL OL') .
  eq remove(O, OL) = OL [owise] .
endm

*** ----------------------------------------------------------------------------

mod CONFIGURATION/OPS is
  extending OID-LIST .

  *** <_|_> (classless objects)  - - - - - - - - - - - - - - - - - - - - - - - -
  op <_|_> : Oid AttributeSet -> Object [ctor object] .

  *** null object  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op null : -> Oid [ctor] .

  *** attribute names and values  - - - - - - - - - - - - - - - - - - - - - - --
  sorts AttrName AttrValue .
  op _:_ : AttrName AttrValue -> Attribute [ctor prec 31] .
  op AttrValue : Universal -> AttrValue [ctor poly (1)] .

  *** attribute modifiers  - - - - - - - - - - - - - - - - - - - - - - - - - - -
  sort AttrModifier .
  op subject : AttrModifier -> AttrName .
  op __ : AttrModifier AttrValue -> AttrValue .

  *** - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  var  C : Configuration .
  var  C? : [Configuration] .
  var  B : [Bool] .
  var  N : AttrName .
  vars V V' : AttrValue .
  var  V? : [AttrValue] .
  var  M : AttrModifier .
  var  Atts : AttributeSet .

  *** defined  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op defined : [AttrValue] -> Bool .
  eq defined(V) = true .
  eq defined(V?) = false [owise] .

  op undefined : -> [AttrValue] .

  *** lookup  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op lookup : AttrName AttributeSet -> [AttrValue] .
  eq lookup(N, (N : V, Atts))
   = if defined(lookup(N, Atts)) then undefined else V fi .
  eq lookup(N, Atts) = undefined [owise] .

  op _.get(_) : AttributeSet AttrName -> [AttrValue] [prec 15] .
  eq (Atts).get(N) = lookup(N, Atts) .

  op _.select(_) : AttributeSet AttrName -> AttributeSet [prec 15] .
  ceq (Atts).select(N) = N : V if V := lookup(N, Atts) .
  eq (Atts).select(N) = none [owise] .

  *** insert  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op insert : AttrName AttrValue AttributeSet -> AttributeSet .
  eq insert(N, V, (N : V', Atts))
   = if defined(lookup(N, Atts))
     then insert(N, V, Atts)
     else N : V, Atts fi .
  eq insert(N, V, Atts) = N : V, Atts [owise] .

  op insert? : AttrName [AttrValue] AttributeSet -> AttributeSet .
  eq insert?(N, V, Atts) = insert(N, V, Atts) .
  eq insert?(N, V?, Atts) = Atts [owise] .

  op _.set(_,_) : AttributeSet AttrName [AttrValue] -> AttributeSet [prec 15] .
  eq (Atts).set(N, V?) = insert?(N, V?, Atts) .

  *** add  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op add : AttrName [AttrValue] AttributeSet -> AttributeSet .
  eq add(N, V?, Atts)
   = if defined(lookup(N, Atts)) then Atts else insert?(N, V?, Atts) fi .

  op _.add(_,_) : AttributeSet AttrName [AttrValue] -> AttributeSet [prec 15] .
  eq (Atts).add(N, V?) = add(N, V?, Atts) .

  *** apply modifier  - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op apply : AttrModifier AttributeSet -> AttributeSet .
  ceq apply(M, Atts) = insert?(N, M lookup(N, Atts), Atts)
   if N := subject(M) .
  eq apply(M, Atts) = Atts [owise] .

  op _>>=_ : AttributeSet AttrModifier -> AttributeSet [prec 15] .
  eq Atts >>= M = apply(M, Atts) .

  *** delete  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op delete : AttrName AttributeSet -> AttributeSet .
  eq delete(N, (N : V, Atts)) = delete(N, Atts) .
  eq delete(N, Atts) = Atts [owise] .

  op _.delete(_) : AttributeSet AttrName -> AttributeSet [prec 15] .
  eq (Atts).delete(N) = delete(N, Atts) .

  *** conditionals  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op _if_ : [Configuration] Bool -> Configuration [strat (2 0 1 0) prec 15] .
  eq C? if true = C? .
  eq C? if B = none [owise] .

  op _unless_ : [Configuration] Bool -> Configuration [strat (2 0 1 0) prec 15] .
  eq C? unless true = none .
  eq C? unless B = C? [owise] .
endm

********************************************************************************
