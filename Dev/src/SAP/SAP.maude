***( SpeX/SAP

  This file is part of SAP, a Syntactic Analysis & Printing library
  for Maude 3 based on REPL.

  Copyright : (C) 2020-2022 Simion Stoilow Institute of Mathematics
              of the Romanian Academy (IMAR)
  License   : GNU General Public License v2.0 or later (GPL-2.0-or-later)
  Author    : Ionut Tutu <Ionut.Tutu@imar.ro>

)

sload ./Grammar.maude
sload ./Snippet.maude
sload ../CommonLibs/ATerm.maude
sload ../CommonLibs/Formatting.maude
sload ../REPL/REPL.maude

*** Language descriptions  *****************************************************

fth LID is
  sort Lid .
  op Lid : -> Lid .

  eq L:Lid = Lid [nonexec] .
endfth

fth LANGUAGE is
  protecting GRAMMAR .
  including  LID .

  op grammar : Lid -> Grammar .
endfth

*** ----------------------------------------------------------------------------

view LANGUAGE from TRIV to LANGUAGE is
  sort Elt to Lid .
endv

fmod LANG-NAME { L :: LANGUAGE } is
  protecting NAME { LANGUAGE } { L } .
endfm

*** Printing  ******************************************************************

fth PRINT-TERM-FORMATTING is
  protecting GRAMMAR .
  op print-term-format : QidList Grammar -> QidList .
endfth

*** ----------------------------------------------------------------------------

fmod PRINTING/GRAMMAR-BASED* { PTF :: PRINT-TERM-FORMATTING } is
  protecting ATERM .

  var G : Grammar .
  var VS : VariableSet .
  var T : Term .
  var @T : ATerm .

  *** print term  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op print`term_given_ : Term Grammar ~> QidList .
  eq print term T given G = print term T given (G & none) .

  op print`term_given(_&_) : Term Grammar VariableSet ~> QidList .
  eq print term T given (G & VS)
   = print-term-format(metaPrettyPrint(fmod(G), VS, T,
        mixfix format number rat), G) .

  *** print annotated term  - - - - - - - - - - - - - - - - - - - - - - - - - --
  op print`term_given_ : ATerm Grammar ~> QidList .
  eq print term @T given G = print term plain-term(@T) given G .

  op print`term_given(_&_) : ATerm Grammar VariableSet ~> QidList .
  eq print term @T given (G & VS) = print term plain-term(@T) given (G & VS) .

  *** list term (unformatted)  - - - - - - - - - - - - - - - - - - - - - - - - -
  op list`term_given_ : Term Grammar ~> QidList .
  eq list term T given G = list term T given (G & none) .

  op list`term_given(_&_) : Term Grammar VariableSet ~> QidList .
  eq list term T given (G & VS)
   = print-term-format(metaPrettyPrint(fmod(G), VS, T,
        mixfix number rat), G) .
endfm

*** ----------------------------------------------------------------------------

fmod PRINTING* { L :: LANGUAGE, PTF :: PRINT-TERM-FORMATTING } is
  protecting PRINTING/GRAMMAR-BASED* { PTF } .

  var L : L$Lid .
  var T : Term .
  var TL : TermList .
  var @T : ATerm .

  *** print term  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op print_term_ : L$Lid Term ~> QidList .
  eq print L term (T) = print term T given grammar(L) .

  op print_terms_ : L$Lid TermList ~> QidList2 .
  eq print L terms empty = nil .
  eq print L terms (T, TL)
   = :[print L term T] (print L terms TL) .

  *** print annotated term  - - - - - - - - - - - - - - - - - - - - - - - - - --
  op print_term_ : L$Lid ATerm ~> QidList .
  eq print L term @T = print term @T given grammar(L) .

  *** list term (unformatted)  - - - - - - - - - - - - - - - - - - - - - - - - -
  op list_term_ : L$Lid Term ~> QidList .
  eq list L term T = list term T given grammar(L) .
endfm

*** A simple print-term format  ------------------------------------------------

fmod UNWRAPPING is
  protecting GRAMMAR .

  var G : Grammar .
  var QI : Qid .
  var QIL : QidList .

  *** unwrap  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op unwrap : QidList Grammar ~> QidList .
  eq unwrap(nil, G) = nil .
  ceq unwrap(QI '`( QIL, G) = $unwrap(QIL, G) if QI in bubble-ctors(G) .
  eq unwrap(QI QIL, G) = QI unwrap(QIL, G) [owise] .

  op $unwrap : QidList Grammar ~> QidList .
  eq $unwrap('`) QIL, G) = unwrap(QIL, G) .
  eq $unwrap(QI QIL, G) = unquote(QI) $unwrap(QIL, G) [owise] .
endfm

*** ----------------------------------------------------------------------------

view Unwrap from PRINT-TERM-FORMATTING to UNWRAPPING is
  op print-term-format(QIL:QidList, G:Grammar) to term
    unwrap(QIL:QidList, G:Grammar) .
endv

*** ----------------------------------------------------------------------------

fmod PRINTING/GRAMMAR-BASED is
  protecting PRINTING/GRAMMAR-BASED* { Unwrap } .
endfm

*** ----------------------------------------------------------------------------

fmod PRINTING { L :: LANGUAGE } is
  protecting PRINTING* { L, Unwrap } .
endfm

*** Warning args  **************************************************************

fmod SAP/WARNING-ARGS is
  extending  REPL/WARNING-ARGS { REPL/Index{SAP-Snippet} } .
  protecting ATERM .

  var  I : TP-Index .
  vars WA WA1 WA2 : WarningArgs .
  var  QIL : QidList .
  var  T : Term .
  var  @T : ATerm .

  *** indicators of the stage where a warning is issued  - - - - - - - - - - - -
  op during`analysis : -> WarningArgs [ctor] .

  op during`analysis`&_ : WarningArgs -> WarningArgs .
  eq during analysis & (WA1, during analysis, WA2) = WA1, during analysis, WA2 .
  eq during analysis & WA = WA, during analysis [owise] .

  op during`scanning`&_ : WarningArgs -> WarningArgs .
  eq during scanning & (WA1, during analysis, WA2)
   = during scanning & (WA1, WA2) .
  eq during scanning & WA = WA [owise] .

  op during-analysis : WarningArgs -> Bool .
  eq during-analysis((WA1, during analysis, WA2)) = true .
  eq during-analysis(WA) = false [owise] .

  op during-scanning : WarningArgs -> Bool .
  eq during-scanning(WA) = not during-analysis(WA) .

  *** _>>_ (right shift a list of args by a (successfully parsed) QidList)  - --
  op _>>_ : WarningArgs QidList -> WarningArgs .
  eq none >> QIL = none .
  eq (WA, at I) >> QIL = (WA >> QIL), at (I >> basenames(QIL)) .
  eq (WA, include context) >> QIL = (WA >> QIL), include context .
  eq (WA, during analysis) >> QIL = (WA >> QIL), during analysis .

  *** at_&_ (add an index to a list of args if one isn't already present)  - - -
  op at_&_ : QidList WarningArgs -> WarningArgs .
  eq at QIL & (WA1, at I, WA2) = WA1, at I, WA2 .
  eq at QIL & WA = at QIL, WA [owise] .

  *** additional indexing arguments  - - - - - - - - - - - - - - - - - - - - - -
  op at_ : QidList -> WarningArg .
  eq at QIL = at end-index(basenames(QIL)) .

  op at`term_ : Term -> WarningArg .
  eq at term T = at term-traversal(T) .

  op at`term_ : ATerm -> WarningArg .
  eq at term @T = at term plain-term(@T) .
endfm

*** ----------------------------------------------------------------------------

fmod SAP/INDEXING-ARGS* { PTF :: PRINT-TERM-FORMATTING } is
  protecting SAP/WARNING-ARGS .
  protecting PRINTING/GRAMMAR-BASED* { PTF } .

  var G : Grammar .
  var VS : VariableSet .
  var T : Term .
  var @T : ATerm .

  op at`term_given_ : [Term] Grammar -> WarningArg .
  eq at term T given G =  at (list term T given G) .

  op at`term_given(_&_) : [Term] Grammar VariableSet -> WarningArg .
  eq at term T given (G & VS) =  at (list term T given (G & VS)) .

  op at`term_given_ : [ATerm] Grammar -> WarningArg .
  eq at term @T given G =  at term plain-term(@T) given G .

  op at`term_given(_&_) : [ATerm] Grammar VariableSet -> WarningArg .
  eq at term @T given (G & VS) =  at term plain-term(@T) given (G & VS) .
endfm

*** ----------------------------------------------------------------------------

fmod SAP/INDEXING-ARGS is
  protecting SAP/INDEXING-ARGS* { Unwrap } .
endfm

*** Parsing outcome  ***********************************************************

fmod PARSING-OUTCOME is
  protecting SAP/WARNING-ARGS .

  var  PO : ParsingOutcome .
  vars PO? PO'? : [ParsingOutcome] .
  var  @T : ATerm .
  var  RP : ResultPair .
  var  QIL : QidList .
  var  WA : WarningArgs .

  *** ParsingOutcome  - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  sort ParsingOutcome .
  op successful-parsing : ATerm -> ParsingOutcome [ctor] .
  op incomplete`input : -> ParsingOutcome [ctor] .
  op parsing-error : QidList WarningArgs -> ParsingOutcome [ctor] .

  *** plain parsing errors  - - - - - - - - - - - - - - - - - - - - - - - - - --
  op parsing-error : QidList -> ParsingOutcome .
  eq parsing-error(QIL) = parsing-error(QIL, none) .

  *** _and-then_  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op _and-then_ : ParsingOutcome ParsingOutcome -> ParsingOutcome
    [strat (1 0 2 0) gather (e E) prec 55] .
  eq successful-parsing(@T) and-then PO'? = PO'? .
  eq PO? and-then PO'? = PO? [owise] .

  *** _or-else_  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op _or-else_ : ParsingOutcome ParsingOutcome -> ParsingOutcome
    [strat (1 0 2 0) gather (e E) prec 59] .
  eq successful-parsing(@T) or-else PO'? = successful-parsing(@T) .
  eq incomplete input or-else PO'? = incomplete input .
  ceq parsing-error(QIL, WA) or-else PO'? = parsing-error(QIL, WA)
   if during-analysis(WA) .
  eq PO? or-else PO'? = PO'? [owise] .

  *** _or-else (if inconclusive)_  - - - - - - - - - - - - - - - - - - - - - - -
  op _or-else,if`inconclusive,_ : ParsingOutcome ParsingOutcome
      -> ParsingOutcome [strat (1 0 2 0) gather (e E) prec 71] .
  eq PO or-else, if inconclusive, PO'? = PO .
  eq PO? or-else, if inconclusive, PO'? = PO'? [owise] .
endfm

*** Parsing errors  ************************************************************

fth PARSING-ERROR-FORMATTING is
  protecting QID-LIST .

  op unexpected-token : Qid -> QidList .
  op unexpected-scanning-error : -> QidList .
  op ambiguous-input : QidList QidList QidList QidList -> QidList .
  op incomplete-input : -> QidList .
  op too-many-terms : -> QidList .
  op empty-term-list : -> QidList .
  op trace-format : QidList -> QidList .
endfth

*** ----------------------------------------------------------------------------

view Basic-Parsing-Errors
from PARSING-ERROR-FORMATTING to QID-LIST/FORMATTING is
  op unexpected-token(QI:Qid) to term
    ('unexpected 'token: '\s emph(QI:Qid)) .

  op unexpected-scanning-error to term
    'unexpected 'syntax 'error .

  op ambiguous-input(TP1:QidList, QIL1:QidList, TP2:QidList, QIL2:QidList)
    to term
    ('ambiguous 'input '`, 'two 'parses 'are: '\n
      TP1:QidList ': '\s QIL1:QidList '\n
      '-versus- '\n
      TP2:QidList ': '\s QIL2:QidList) .

  op incomplete-input to term
    'unexpected 'end 'of 'tokens .

  op too-many-terms to term
    'unexpected 'parsing 'error: 'too 'many 'terms .

  op empty-term-list to term
    'unexpected 'parsing 'error: 'empty 'term 'list .

  op trace-format(QIL:QidList) to term
    '\n 'in '\s emph(QIL:QidList) .
endv

*** Scanning  ******************************************************************

fmod SCANNING/GRAMMAR-BASED* { PTF :: PRINT-TERM-FORMATTING,
    PEF :: PARSING-ERROR-FORMATTING } is
  protecting PARSING-OUTCOME .
  protecting SAP/INDEXING-ARGS* { PTF } .
  protecting PRINTING/GRAMMAR-BASED* { PTF } .

  var  G : Grammar .
  var  VS : VariableSet .
  var  QIL : QidList .
  var  TP? : Type? .
  var  N : Nat .
  vars RP RP1 RP2 : ResultPair .
  var  RP? : ResultPair? .
  var  QI : Qid .
  var  T : Term .
  var  TQ : TermQid .
  var  TL : TermList .
  var  NTL : NeTermList .

  *** scan input  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op scan`input(_:_)given_ : QidList Type? Grammar ~> ParsingOutcome
    [format (d s s d s s d s s d)] .
  eq scan input (QIL : TP?) given G
   = scan input (QIL : TP?) given (G & none) .

  op scan`input(_:_)given(_&_) : QidList Type? Grammar
    VariableSet ~> ParsingOutcome
    [format (d s s d s s d s s d s s d d)] .
  eq scan input (QIL : TP?) given (G & VS)
   = $scan-input(QIL, metaParse(fmod(G), VS, QIL, TP?), G, VS) .

  op $scan-input : QidList ResultPair? Grammar VariableSet ~> ParsingOutcome .
  eq $scan-input(QIL, RP, G, VS)
   = successful-parsing(annotate(getTerm(RP), fmod(G))) .
  eq $scan-input(QIL, noParse(N), G, VS)
   = if N == size(QIL)
     then incomplete input
     else parsing-error(
        unexpected-token(get-qid(QIL, N, 'get-qid-error)),
        (at take(s N, QIL), include context)) fi .
  eq $scan-input(QIL, ambiguity(RP1, RP2), G, VS)
   = parsing-error(
      ambiguous-input(
        mksord(getType(RP1)), print term getTerm(RP1) given (G & VS),
        mksord(getType(RP2)), print term getTerm(RP2) given (G & VS))) .
  eq $scan-input(QIL, RP?, G, VS)
   = parsing-error(unexpected-scanning-error) [owise] .
endfm

*** ----------------------------------------------------------------------------

fmod SCANNING* { L :: LANGUAGE, PTF :: PRINT-TERM-FORMATTING,
    PEF :: PARSING-ERROR-FORMATTING } is
  protecting SCANNING/GRAMMAR-BASED* { PTF, PEF } .

  var  L : L$Lid .
  var  QIL : QidList .
  var  TP? : Type? .

  *** scan input  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op scan_input(_:_) : L$Lid QidList Type? ~> ParsingOutcome .
  eq scan L input (QIL : TP?)
   = scan input (QIL : TP?) given grammar(L) .
endfm

*** ----------------------------------------------------------------------------

fmod SCANNING { L :: LANGUAGE } is
  protecting SCANNING* { L, Unwrap, Basic-Parsing-Errors } .
endfm

*** Syntactic-analysis outcome  ************************************************

fmod ANALYSIS-OUTCOME* { PTF :: PRINT-TERM-FORMATTING,
    PEF :: PARSING-ERROR-FORMATTING } is
  protecting PARSING-OUTCOME .
  protecting SCANNING/GRAMMAR-BASED* { PTF, PEF } .

  var  AO? : [AnalysisOutcome] .
  var  AOL? : [AnalysisOutcomeList] .
  var  NAOL? : [NeAnalysisOutcomeList] .
  vars N : Nat .
  var  NL : NatList .
  var  G : Grammar .
  var  VS : VariableSet .
  var  @T : ATerm .
  vars @TL @TL' : ATermList .
  var  @NTL : NeATermList .
  var  TP : Type .
  var  TP? : Type? .
  var  RP : ResultPair .
  vars QI X : Qid .
  vars QIL QIL' IQIL OP K : QidList .
  var  QLL : QidList2 .
  var  NQLL : QidList2 .
  vars WA WA' : WarningArgs .

  *** AnalysisOutcome  - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  sorts SuccessfulAnalysis AnalysisError AnalysisOutcome .
  subsorts SuccessfulAnalysis AnalysisError < AnalysisOutcome .
  op successful-analysis : ATermList -> SuccessfulAnalysis [ctor] .
  op analysis-error : QidList WarningArgs -> AnalysisError [ctor] .

  sorts NeAnalysisOutcomeList AnalysisOutcomeList .
  subsorts AnalysisOutcome < NeAnalysisOutcomeList < AnalysisOutcomeList .
  op empty : -> AnalysisOutcomeList [ctor] .
  op _,_ : AnalysisOutcomeList AnalysisOutcomeList -> AnalysisOutcomeList
    [ctor assoc id: empty strat (0) gather (e E) prec 121] .
  op _,_ : NeAnalysisOutcomeList AnalysisOutcomeList -> NeAnalysisOutcomeList
    [ctor ditto] .
  op _,_ : AnalysisOutcomeList NeAnalysisOutcomeList -> NeAnalysisOutcomeList
    [ctor ditto] .

  *** plain analysis errors  - - - - - - - - - - - - - - - - - - - - - - - - - -
  op analysis-error : QidList -> AnalysisOutcome .
  eq analysis-error(QIL) = analysis-error(QIL, none) .

  *** _and-then_  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op _and-then_ : AnalysisOutcome AnalysisOutcome -> AnalysisOutcome
    [strat (1 0 2 0) gather (e E) prec 55] .
  eq successful-analysis(@TL) and-then successful-analysis(@TL')
   = successful-analysis((@TL, @TL')) .
  eq successful-analysis(@TL) and-then analysis-error(QIL', WA')
   = analysis-error(QIL', WA') .
  eq analysis-error(QIL, WA) and-then AO?
   = analysis-error(QIL, WA) .

  *** _or-else_  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op _or-else_ : AnalysisOutcome AnalysisOutcome -> AnalysisOutcome
    [strat (1 0 2 0) gather (e E) prec 59] .
  eq successful-analysis(@TL) or-else AO?
   = successful-analysis(@TL) .
  eq analysis-error(QIL, WA) or-else successful-analysis(@TL')
   = successful-analysis(@TL') .
  eq analysis-error(QIL, WA) or-else analysis-error(QIL', WA')
   = analysis-error(QIL QIL', (WA, WA')) .

  *** try  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op try{_[_]:_} : Qid NeAnalysisOutcomeList Qid -> AnalysisOutcome .
  eq try {QI [ NAOL? ] : X}
   = $try(QI, $seq(usplit(QI), nil, NAOL?), X) .

  op $try : Qid AnalysisOutcome Qid -> AnalysisOutcome .
  eq $try(QI, successful-analysis(@TL), X)
   = successful-analysis({QI[@TL] : X}) .
  eq $try(QI, AO?, X) = AO? [owise] .

  op $seq : QidList2 QidList AnalysisOutcomeList -> AnalysisOutcome .
  eq $seq(nil, K, (successful-analysis(@TL), AOL?))
   = successful-analysis(@TL) and-then $seq(nil, K tl-traversal(@TL), AOL?) .
  eq $seq(:[OP] QLL, K, (successful-analysis(@TL), AOL?))
   = successful-analysis(@TL) and-then $seq(QLL, K OP tl-traversal(@TL), AOL?) .
  eq $seq(nil, K, (analysis-error(QIL, WA), AOL?))
   = analysis-error(QIL, WA >> K) .
  eq $seq(:[OP] QLL, K, (analysis-error(QIL, WA), AOL?))
   = analysis-error(QIL, WA >> (K OP)) .
  eq $seq(QLL, K, empty) = successful-analysis(empty) .

  op try{_:_} : AnalysisOutcome Qid -> AnalysisOutcome .
  eq try { successful-analysis(empty) : X } = analysis-error(empty-term-list) .
  eq try { successful-analysis(@T) : X } = successful-analysis({@T : X}) .
  eq try { successful-analysis(@NTL) : X }
   = analysis-error(too-many-terms) [owise] .
  eq try { analysis-error(QIL, WA) : X } = analysis-error(QIL, WA) .

  op try{_} : AnalysisOutcomeList -> AnalysisOutcome .
  eq try { AOL? } = $seq(nil, nil, AOL?) .

  *** conversion between parsing and analysis outcomes  - - - - - - - - - - - --
  op just_on_ : ParsingOutcome QidList -> AnalysisOutcome .
  eq just successful-parsing(@T) on IQIL
   = successful-analysis(@T) .
  eq just incomplete input on IQIL
  = analysis-error(incomplete-input, (at IQIL, include context)) .
  eq just parsing-error(QIL, WA) on IQIL
   = analysis-error(QIL, at IQIL & WA) .

  op parsing-outcome : AnalysisOutcome -> ParsingOutcome .
  eq parsing-outcome(successful-analysis(empty))
   = parsing-error(empty-term-list, during analysis) .
  eq parsing-outcome(successful-analysis(@T))
   = successful-parsing(@T) .
  eq parsing-outcome(successful-analysis(@NTL))
   = parsing-error(too-many-terms, during analysis) [owise] .
  eq parsing-outcome(analysis-error(QIL, WA))
   = parsing-error(QIL, during analysis & WA) .

  *** decode input (integrating ParsingOutcomes as AnalysisOutcomes)  - - - - --
  op decode`input(_:_)given_ : QidList Type? Grammar ~> AnalysisOutcome
    [format (d s s d s s d s s d)] .
  eq decode input (QIL : TP?) given G
   = decode input (QIL : TP?) given (G & none) .

  op decode`input(_:_)given(_&_) : QidList Type? Grammar
    VariableSet ~> AnalysisOutcome
    [format (d s s d s s d s s d s s d d)] .
  eq decode input (QIL : TP?) given (G & VS)
   = just (scan input (QIL : TP?) given (G & VS)) on QIL .
endfm

*** ----------------------------------------------------------------------------

fmod ANALYSIS-OUTCOME is
  protecting ANALYSIS-OUTCOME* { Unwrap, Basic-Parsing-Errors } .
endfm

*** Syntactic analysis  ********************************************************

fmod SYNTACTIC-ANALYSIS-TASK is
  protecting ATERM .
  protecting SAP/WARNING-ARGS .

  *** AnalysisTask  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  sort AnalysisTask .
  op return_ : [ATermList] -> AnalysisTask [ctor] .
  op fail : [QidList] [WarningArgs] -> AnalysisTask [ctor] .
  op _and-then_ : AnalysisTask AnalysisTask -> AnalysisTask
    [ctor strat (0) gather (e E) prec 55] .
  op _or-else_ :  AnalysisTask AnalysisTask -> AnalysisTask
    [ctor strat (0) gather (e E) prec 59] .

  sorts NeAnalysisTaskList AnalysisTaskList .
  subsorts AnalysisTask < NeAnalysisTaskList < AnalysisTaskList .
  op empty : -> AnalysisTaskList .
  op _,_ : AnalysisTaskList AnalysisTaskList -> AnalysisTaskList
    [ctor assoc id: empty strat (0) gather (e E) prec 121] .
  op _,_ : NeAnalysisTaskList AnalysisTaskList -> NeAnalysisTaskList
    [ctor ditto] .
  op _,_ : AnalysisTaskList NeAnalysisTaskList -> NeAnalysisTaskList
    [ctor ditto] .

  op try{_[_]:_} : Qid NeAnalysisTaskList Qid -> AnalysisTask [ctor] .
  op try{_:_} : AnalysisTask Qid -> AnalysisTask [ctor] .
  op try{_} : AnalysisTaskList -> AnalysisTask [ctor] .

  *** plain error messages  - - - - - - - - - - - - - - - - - - - - - - - - - --
  op fail : [QidList] -> AnalysisTask .
  eq fail (QIL:QidList) = fail (QIL:QidList, none) .

  *** check_ (integrating Booleans as AnalysisTasks)  - - - - - - - - - - - - --
  op check_ : [Bool] -> AnalysisTask .
  eq check true = return (empty) .
  eq check false = fail (nil) .
endfm

*** ----------------------------------------------------------------------------

fth ANALYSIS-STATE is
  protecting ATERM .

  sort State .
  op _>>=_ : State ATerm -> State .
endfth

*** ----------------------------------------------------------------------------

fmod ANALYSIS-STATE-UPDATES* { AS :: ANALYSIS-STATE,
    PTF :: PRINT-TERM-FORMATTING, PEF :: PARSING-ERROR-FORMATTING } is
  protecting ANALYSIS-OUTCOME* { PTF, PEF } .

  var S : AS$State .
  var @T : ATerm .
  var @TL : ATermList .
  var AO : AnalysisOutcome .

  *** state updates  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op update : AS$State AnalysisOutcome -> AS$State .
  eq update(S, AO) = S >>= AO .

  op _>>=_ : AS$State AnalysisOutcome -> AS$State .
  eq S >>= successful-analysis((@T, @TL))
   = S >>= @T >>= successful-analysis(@TL) .
  eq S >>= AO = S [owise] .
endfm

*** ----------------------------------------------------------------------------

fmod ANALYSIS-STATE-UPDATES { AS :: ANALYSIS-STATE } is
  protecting ANALYSIS-STATE-UPDATES* { AS, Unwrap, Basic-Parsing-Errors } .
endfm

*** ----------------------------------------------------------------------------

fmod SYNTACTIC-ANALYSIS* { L :: LANGUAGE, AS :: ANALYSIS-STATE,
    PTF :: PRINT-TERM-FORMATTING, PEF :: PARSING-ERROR-FORMATTING } is
  protecting SYNTACTIC-ANALYSIS-TASK .
  protecting SCANNING* { L, PTF, PEF } .
  protecting PRINTING* { L, PTF } .
  protecting ANALYSIS-STATE-UPDATES* { AS, PTF, PEF } .
  protecting QID-LIST/FORMATTING .

  var  L : L$Lid .
  var  PO : ParsingOutcome .
  var  AO : AnalysisOutcome .
  vars Act Act' : AnalysisAction{L} .
  vars AT AT' : AnalysisTask{L} .
  var  ATL : AnalysisTaskList{L} .
  var  NATL : NeAnalysisTaskList{L} .
  var  S : AS$State .
  var  G : Grammar .
  var  VS : VariableSet .
  var  T : Term .
  var  TL : TermList .
  var  @T : ATerm .
  var  @TL : ATermList .
  vars QI X : Qid .
  var  QIL : QidList .
  var  TP? : Type? .
  var  WA : WarningArgs .

  *** AnalysisAction{L}  - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  sort AnalysisAction{L} .
  op _;_ : AnalysisAction{L} AnalysisAction{L} -> AnalysisAction{L}
    [ctor assoc] .

  *** AnalysisTask{L}  - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  sort AnalysisTask{L} .
  subsort AnalysisTask < AnalysisTask{L} .
  op __ : AnalysisAction{L} [ATermList] -> AnalysisTask{L}
    [ctor prec 21] .
  op _and-then_ : AnalysisTask{L} AnalysisTask{L} -> AnalysisTask{L}
    [ctor ditto] .
  op _or-else_ :  AnalysisTask{L} AnalysisTask{L} -> AnalysisTask{L}
    [ctor ditto] .
  op _then_ : AnalysisTask{L} AnalysisAction{L} -> AnalysisTask{L}
    [ctor prec 67] .

  sorts NeAnalysisTaskList{L} AnalysisTaskList{L} .
  subsorts AnalysisTask{L} NeAnalysisTaskList < NeAnalysisTaskList{L} .
  subsorts NeAnalysisTaskList{L} AnalysisTaskList < AnalysisTaskList{L} .
  op _,_ : AnalysisTaskList{L} AnalysisTaskList{L} -> AnalysisTaskList{L}
    [ctor ditto] .
  op _,_ : NeAnalysisTaskList{L} AnalysisTaskList{L} -> NeAnalysisTaskList{L}
    [ctor ditto] .
  op _,_ : AnalysisTaskList{L} NeAnalysisTaskList{L} -> NeAnalysisTaskList{L}
    [ctor ditto] .

  op try{_[_]:_} : Qid NeAnalysisTaskList{L} Qid -> AnalysisTask{L}
    [ctor ditto] .
  op try{_:_} : AnalysisTask{L} Qid -> AnalysisTask{L}
    [ctor ditto] .
  op try{_} : AnalysisTaskList{L} -> AnalysisTask{L}
    [ctor ditto] .

  *** sequential composition of analysis actions  - - - - - - - - - - - - - - --
  eq (Act ; Act') (@TL) = Act (@TL) then Act' .

  *** _in_ (running analysis tasks in a state)  - - - - - - - - - - - - - - - --
  op _in_ : AnalysisTaskList{L} AS$State ~> AnalysisOutcomeList
    [strat (2 0 1 0) prec 71] .

  eq (empty).AnalysisTask{L} in S = empty .

  eq return (@TL) in S = successful-analysis(@TL) .
  eq fail (QIL, WA) in S = analysis-error(QIL, WA) .
  eq (AT and-then AT') in S = (AT in S) and-then (AT' in S) .
  eq (AT or-else AT') in S = (AT in S) or-else (AT' in S) .
  eq (AT then Act) in S = (AT in S) then Act in S .

  ceq (AT, NATL) in S = AO, (NATL in S >>= AO)
   if AO := AT in S .

  eq try {QI [ NATL ] : X} in S = try {QI [ NATL in S ] : X} .
  eq try {AT : X} in S = try {AT in S : X} .
  eq try {ATL} in S = try {ATL in S} .

  *** decode input (integrating ParsingOutcomes as AnalysisOutcomes)  - - - - --
  op decode_input(_:_) : L$Lid QidList Type? ~> AnalysisOutcome .
  eq decode L input (QIL : TP?)
   = decode input (QIL : TP?) given grammar(L) .

  *** continuations of parsing and analysis outcomes  - - - - - - - - - - - - --
  op _then_in_ : ParsingOutcome AnalysisAction{L} AS$State -> ParsingOutcome
    [strat (1 0 2 3 0) prec 65] .
  eq successful-parsing(@T) then Act in S
   = parsing-outcome(Act (@T) in S) .
  eq PO then Act in S = PO [owise] .

  op _then_ : AnalysisOutcome AnalysisAction{L} -> AnalysisTask{L}
    [strat (1 0 2 0) prec 65] .
  eq successful-analysis(@TL) then Act = Act (@TL) .
  eq analysis-error(QIL, WA) then Act = fail (QIL, WA) .

  *** fail with trace  - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op fail`with_trace_ : L$Lid [Term] -> AnalysisTask{L} .
  eq fail with L trace (T) = fail with L trace (T, (none).WarningArgs) .

  op fail`with_trace(_,_) : L$Lid [Term] [WarningArgs] -> AnalysisTask{L} .
  eq fail with L trace (T, WA) = fail (trace-format(print L term (T)), WA) .

  op fail`with_trace_ : L$Lid [ATerm] -> AnalysisTask{L} .
  eq fail with L trace (@T) = fail with L trace (plain-term(@T)) .

  op fail`with_trace(_,_) : L$Lid [ATerm] [WarningArgs] -> AnalysisTask{L} .
  eq fail with L trace (@T, WA) = fail with L trace (plain-term(@T), WA) .

  *** warning arguments  - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op at_term(_) : L$Lid [Term] -> WarningArg .
  eq at L term (T) = at (list L term (T)) .

  op at_term_ : L$Lid [ATerm] -> WarningArg .
  eq at L term (@T) = at L term (plain-term(@T)) .

  *** parse input  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op parse_input_in_ : L$Lid QidList AS$State ~> ParsingOutcome .

  *** reanalyse  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op reanalyse : L$Lid TermList AS$State -> AnalysisOutcome .
  eq reanalyse(L, empty, S) = successful-analysis(empty) .
  ceq reanalyse(L, (T, TL), S)
   = AO and-then reanalyse(L, TL, S >>= AO)
   if QIL := clear-formatting(print L term (T))
      /\ AO := just (parse L input QIL in S) on QIL .
endfm

*** ----------------------------------------------------------------------------

fmod SYNTACTIC-ANALYSIS { L :: LANGUAGE, AS :: ANALYSIS-STATE } is
  protecting SYNTACTIC-ANALYSIS* { L, AS, Unwrap, Basic-Parsing-Errors } .
endfm

*** ----------------------------------------------------------------------------

fmod SINGLETON-STATE { L :: LANGUAGE } is
  protecting ATERM .
  sort SingletonState{L} .
  op [*] : -> SingletonState{L} [ctor] .
  op _>>=_ : SingletonState{L} ATerm -> SingletonState{L} .
  eq S:SingletonState{L} >>= @T:ATerm = S:SingletonState{L} .
endfm

view Stateless { L :: LANGUAGE } from ANALYSIS-STATE to SINGLETON-STATE { L } is
  sort State to SingletonState{L} .
endv

fmod STATELESS-SYNTACTIC-ANALYSIS { L :: LANGUAGE } is
  protecting SYNTACTIC-ANALYSIS { L, Stateless{L} } .
endfm

********************************************************************************
