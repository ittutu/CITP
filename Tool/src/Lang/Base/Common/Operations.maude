***( SpeX/Lang/Base/Common

  This file is part of the SpeX-languages suite.

  Copyright : (C) 2021, 2022 Simion Stoilow Institute of Mathematics
              of the Romanian Academy (IMAR)
  License   : GNU General Public License v2.0 or later (GPL-2.0-or-later)
  Author    : Ionut Tutu <Ionut.Tutu@imar.ro>

)

sload ../../../CommonLibs/QidSet.maude
sload ./Attributes.maude

********************************************************************************

view OpDecl from TRIV to META-LEVEL is
  sort Elt to OpDecl .
endv

*** ----------------------------------------------------------------------------

fmod OP-DECL-SET is
  protecting READ { OpDecl } *
    (sort BrList{OpDecl} to OpDeclList,
     sort NeBrList{OpDecl} to NeOpDeclList,
     op read-elt to read-op,
     op read-list to read-ops) .
  protecting QID-SET/OPS .
  protecting ATTR-SET .

  var  QI : Qid .
  var  QIS : QidSet .
  vars TPL A : TypeList .
  vars TP S : Type .
  var  AtS : AttrSet .
  var  OD : OpDecl .
  var  RODS ODS ODS' : OpDeclSet .
  vars ODL ODL1 ODL2 : OpDeclList .
  var  NODL : NeOpDeclList .
  var  T : Term .

  *** arity  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op arity : OpDecl -> TypeList .
  eq arity(op QI : TPL -> TP [AtS] .) = TPL .

  *** sort  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op type : OpDecl -> TypeList .
  eq type(op QI : TPL -> TP [AtS] .) = TP .

  *** _in_  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op _in_ : OpDecl OpDeclSet -> Bool .
  eq OD in (OD ODS) = true .
  eq OD in ODS = false [owise] .

  op op_:_->_in_ : Qid TypeList Type OpDeclSet -> Bool .
  eq op QI : TPL -> TP in (op QI : TPL -> TP [AtS] . ODS) = true .
  eq op QI : TPL -> TP in ODS = false [owise] .

  *** _not-in_  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op _not-in_ : OpDecl OpDeclSet -> Bool .
  eq OD not-in ODS = not (OD in ODS) .

  op op_:_->_not-in_ : Qid TypeList Type OpDeclSet -> Bool .
  eq op QI : TPL -> TP not-in ODS = not (op QI : TPL -> TP in ODS) .

  *** symbol (of an op-declaration)  - - - - - - - - - - - - - - - - - - - - - -
  op symbol : OpDecl -> Qid .
  eq symbol(op QI : TPL -> TP [AtS] .) = QI .

  *** symbols (with a given arity)  - - - - - - - - - - - - - - - - - - - - - --
  op symbols : OpDeclSet TypeList -> QidSet .
  eq symbols(op QI : A -> TP [AtS] . ODS, A)
   = QI ; symbols(ODS, A) .
  eq symbols(ODS, A) = none [owise] .

  *** symbols* (with a given arity, but other sort)  - - - - - - - - - - - - - -
  op symbols* : OpDeclSet TypeList Type -> QidSet .
  eq symbols*(none, A, S) = none .
  eq symbols*(op QI : TPL -> TP [AtS] . ODS, A, S)
   = if TPL == A and TP =/= S
     then QI ; symbols*(ODS, A, S)
     else symbols*(ODS, A, S) fi .

  *** constant-operation symbols (of a given sort)  - - - - - - - - - - - - - --
  op consts : OpDeclSet Type -> QidSet .
  eq consts(op QI : nil -> S [AtS] . ODS, S)
   = QI ; consts(ODS, S) .
  eq consts(ODS, S) = none [owise] .

  *** sorts (used in op declarations)  - - - - - - - - - - - - - - - - - - - - -
  op sorts : OpDeclSet -> SortSet .
  eq sorts((none).OpDeclSet) = none .
  eq sorts(op QI : TPL -> TP [AtS] . ODS)
   = set(TPL) ; TP ; sorts(ODS) .

  *** constant declarations  - - - - - - - - - - - - - - - - - - - - - - - - - -
  op consts : OpDeclSet -> OpDeclSet .
  eq consts(op QI : nil -> TP [AtS] . ODS)
   = (op QI : nil -> TP [AtS] .) consts(ODS) .
  eq consts(ODS) = none [owise] .

  *** _subset_  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op _subset_ : OpDeclSet OpDeclSet -> Bool .
  eq none subset ODS' = true .
  eq (OD ODS) subset ODS' = OD in ODS' and-then ODS subset ODS' .

  *** list  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op list : OpDeclSet -> OpDeclList .
  eq list((none).OpDeclSet) = nil .
  eq list(ODS) = read-ops(unpack('__, upTerm(ODS))) [owise] .

  *** remove a declaration from a list  - - - - - - - - - - - - - - - - - - - --
  op _\_ : OpDeclList OpDecl -> OpDeclList .
  eq (ODL1 {OD} ODL2) \ OD = (ODL1 ODL2) \ OD .
  eq ODL \ OD = ODL [owise] .

  *** topological sort  - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op topo-sort : OpDeclSet ~> OpDeclList .
  eq topo-sort(ODS) = $topo-sort(ODS, list(ODS), none) .

  op $topo-sort : OpDeclSet OpDeclList OpDeclSet ~> OpDeclList .
  eq $topo-sort(RODS, nil, ODS) = nil .
  ceq $topo-sort(RODS, NODL, ODS) = {OD} $topo-sort(RODS, NODL \ OD, ODS OD)
   if OD := $topo-first(RODS, NODL, ODS) .

  op $topo-first : OpDeclSet NeOpDeclList OpDeclSet ~> OpDecl .
  ceq $topo-first(RODS, {OD} ODL, ODS)
   = if ops(T, RODS) subset ODS
     then OD
     else $topo-first(RODS, ODL, ODS) fi
    if (op QI : TPL -> TP [id(T) AtS] .) := OD .
  eq $topo-first(RODS, {OD} ODL, ODS) = OD [owise] .

  *** pure  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op pure : OpDeclSet -> OpDeclSet .
  eq pure(none) = none .
  eq pure(op QI : TPL -> TP [AtS] . ODS)
   = (op QI : TPL -> TP [none] .) pure(ODS) .

  *** ctors  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op ctors : OpDeclSet -> OpDeclSet .
  eq ctors(op QI : TPL -> TP [ctor AtS] . ODS)
   = (op QI : TPL -> TP [ctor AtS] .) ctors(ODS) .
  eq ctors(ODS) = none [owise] .
endfm

********************************************************************************
