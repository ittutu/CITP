***( SpeX/SAP

  This file is part of SAP, a Syntactic Analysis & Printing library
  for Maude 3 based on REPL.

  Copyright : (C) 2020-2022 Simion Stoilow Institute of Mathematics
              of the Romanian Academy (IMAR)
  License   : GNU General Public License v2.0 or later (GPL-2.0-or-later)
  Author    : Ionut Tutu <Ionut.Tutu@imar.ro>

)

sload ../CommonLibs/QidSet.maude
sload ../CommonLibs/StringList.maude

********************************************************************************

set include BOOL off .

fmod $QID is
  sort Qid .

  op <Qids> : -> Qid [special (id-hook QuotedIdentifierSymbol)] .
endfm

*** ----------------------------------------------------------------------------

fmod $QID-LIST is
  protecting $QID .

  sorts NeQidList QidList .
  subsort Qid < NeQidList < QidList .

  op nil : -> QidList [ctor] .
  op __ : QidList QidList -> QidList [ctor assoc id: nil prec 25] .
  op __ : NeQidList QidList -> NeQidList [ctor ditto] .
  op __ : QidList NeQidList -> NeQidList [ctor ditto] .
endfm

*** ----------------------------------------------------------------------------

fmod $NUMBER is
  sorts Zero NzNat Nat .
  subsort Zero NzNat < Nat .

  op 0 : -> Zero [ctor] .
  op s_ : Nat -> NzNat
    [ctor iter
     special (id-hook SuccSymbol term-hook zeroTerm (0))] .

  sorts NzInt Int .
  subsorts NzNat < NzInt Nat < Int .

  op -_ : NzNat -> NzInt
    [ctor
     special (id-hook MinusSymbol
              op-hook succSymbol (s_ : Nat ~> NzNat)
              op-hook minusSymbol (-_ : NzNat ~> Int))] .
  op -_ : NzInt -> NzInt [ditto] .
  op -_ : Int -> Int [ditto] .

  sorts PosRat NzRat Rat .
  subsorts NzInt < NzRat Int < Rat .
  subsorts NzNat < PosRat < NzRat .

  op _/_ : NzInt NzNat -> NzRat
    [ctor prec 31 gather (E e)
     special (id-hook DivisionSymbol
              op-hook succSymbol (s_ : Nat ~> NzNat)
              op-hook minusSymbol (-_ : NzNat ~> Int))] .
endfm

*** ----------------------------------------------------------------------------

fmod $STRING is
  sorts String Char .
  subsort Char < String .

  op <Strings> : -> Char [special (id-hook StringSymbol)] .
  op <Strings> : -> String [ditto] .
endfm

set include BOOL on .

********************************************************************************

fmod GRAMMAR is
  protecting QID-SET/OPS .
  protecting STRING-LIST .

  var  G : Grammar .
  vars GDS GDS1 GDS2 : GramDeclSet .
  var  PSF : PSForm .
  vars PSFL PSFL1 PSFL2 : PSFormList .
  var  QI : Qid .
  var  S : Sort .
  var  SS : SortSet .
  var  ODS : OpDeclSet .
  var  TP : Type .
  var  A : TypeList .
  var  AtS : AttrSet .
  var  BAtS : BblAttrSet .
  var  N : Nat .
  vars BS OS TS : String .
  var  SL : StringList .
  var  T : Term .
  var  TL : TermList .

  *** bubble attributes  - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  sort BblAttr BblAttrSet .
  subsort BblAttr < BblAttrSet .
  op none : -> BblAttrSet [ctor] .
  op __ : BblAttrSet BblAttrSet -> BblAttrSet
    [ctor assoc comm id: none] .
  eq BA:BblAttr BA:BblAttr = BA:BblAttr .

  op min-tokens : Nat -> BblAttr [ctor] .
  op max-tokens : Nat -> BblAttr [ctor] .
  op balanced-parentheses : -> BblAttr [ctor] .
  op exclude : StringList -> BblAttr [ctor] .

  *** Grammar  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  sort Grammar .
  op grammar_is_endgr : Qid GramDeclSet -> Grammar
    [ctor format (d s s n++i n--i d)] .

  sorts GramDecl GramDeclSet .
  subsort GramDecl < GramDeclSet .
  op none : -> GramDeclSet [ctor] .
  op __ : GramDeclSet GramDeclSet -> GramDeclSet
    [ctor assoc comm id: none format (d ni d) prec 35] .

  *** nonterminals  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - -
  sort NontermDecl .
  subsort NontermDecl < GramDecl .
  op nonterms_ : SortSet -> NontermDecl [ctor] .

  *** production rules  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  --
  sort PRuleDecl .
  subsort PRuleDecl < GramDecl .
  op _::=_ : Type PSFormList -> PRuleDecl
    [ctor format (d n++i s --) prec 31] .

  *** prefixed sentential forms  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  --
  sorts PSForm PSFormList .
  subsort PSForm < PSFormList .
  op just_ : Sort -> PSForm [ctor] .
  op token_[_] : String BblAttrSet -> PSForm
    [ctor format (d s s d d d)] .
  op <number> : -> PSForm [ctor] .
  op <string> : -> PSForm [ctor] .
  op bubble_[_] : String BblAttrSet -> PSForm
    [ctor format (d s s d d d)] .
  op _:_[_] : String TypeList AttrSet -> PSForm
    [ctor format (d s s s d d d) prec 27] .
  op _|_ : PSFormList PSFormList -> PSFormList
    [ctor assoc format (d nis ss d) prec 29] .

  *** derived forms  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  --
  op token_ : String -> PSForm .
  eq token TS = token TS [none] .

  op bubble_ : String -> PSForm .
  eq bubble BS = bubble BS [none] .

  op _:_ : String TypeList -> PSForm [prec 27] .
  eq OS : A = OS : A [none] .

  op lit_ : String -> PSForm .
  eq lit OS = OS : nil [none] .

  op lit_[_] : String AttrSet -> PSForm .
  eq lit OS [AtS] = OS : nil [AtS] .

  *** fmod (converting Grammar to FModule)  - - - - - - - - - - - - - - - - - --
  op fmod : Grammar -> FModule [memo] .
  eq fmod(grammar QI is GDS endgr)
   = (fmod QI is
       if bubbles(GDS) then protecting '$QID-LIST . else nil fi
       if numbers(GDS) then protecting '$NUMBER . else nil fi
       if strings(GDS) then protecting '$STRING . else nil fi
       sorts sorts(GDS) . subsorts(GDS)
       ops(GDS) none none
      endfm) .

  op bubbles : GramDeclSet -> Bool .
  eq bubbles(nonterms SS) = false .
  eq bubbles(TP ::= PSFL) = bubbles(PSFL) .
  eq bubbles((none).GramDeclSet) = false .
  eq bubbles(GDS1 GDS2) = bubbles(GDS1) or-else bubbles(GDS2) .

  op bubbles : PSFormList -> Bool .
  eq bubbles(just S) = false .
  eq bubbles(token TS [BAtS]) = true .
  eq bubbles(bubble BS [BAtS]) = true .
  eq bubbles(<number>) = false .
  eq bubbles(<string>) = false .
  eq bubbles(OS : A [AtS]) = false .
  eq bubbles(PSFL1 | PSFL2) = bubbles(PSFL1) or-else bubbles(PSFL2) .

  op numbers : GramDeclSet -> Bool .
  eq numbers(nonterms SS) = false .
  eq numbers(TP ::= PSFL) = numbers(PSFL) .
  eq numbers((none).GramDeclSet) = false .
  eq numbers(GDS1 GDS2) = numbers(GDS1) or-else numbers(GDS2) .

  op numbers : PSFormList -> Bool .
  eq numbers(just S) = false .
  eq numbers(token TS [BAtS]) = false .
  eq numbers(bubble BS [BAtS]) = false .
  eq numbers(<number>) = true .
  eq numbers(<string>) = false .
  eq numbers(OS : A [AtS]) = false .
  eq numbers(PSFL1 | PSFL2) = numbers(PSFL1) or-else numbers(PSFL2) .

  op strings : GramDeclSet -> Bool .
  eq strings(nonterms SS) = false .
  eq strings(TP ::= PSFL) = strings(PSFL) .
  eq strings((none).GramDeclSet) = false .
  eq strings(GDS1 GDS2) = strings(GDS1) or-else strings(GDS2) .

  op strings : PSFormList -> Bool .
  eq strings(just S) = false .
  eq strings(token TS [BAtS]) = false .
  eq strings(bubble BS [BAtS]) = false .
  eq strings(<number>) = false .
  eq strings(<string>) = true .
  eq strings(OS : A [AtS]) = false .
  eq strings(PSFL1 | PSFL2) = strings(PSFL1) or-else strings(PSFL2) .

  op sorts : GramDeclSet -> SortSet .
  eq sorts(nonterms SS) = SS .
  eq sorts(TP ::= PSFL) = TP ; sorts(PSFL) .
  eq sorts((none).GramDeclSet) = none .
  eq sorts(GDS1 GDS2) = sorts(GDS1) ; sorts(GDS2) .

  op sorts : PSFormList -> SortSet .
  eq sorts(just S) = S .
  eq sorts(token TS [BAtS]) = none .
  eq sorts(bubble BS [BAtS]) = none .
  eq sorts(<number>) = none .
  eq sorts(<string>) = none .
  eq sorts(OS : A [AtS]) = set(A) .
  eq sorts(PSFL1 | PSFL2) = sorts(PSFL1) ; sorts(PSFL2) .

  op subsorts : GramDeclSet -> SubsortDeclSet .
  eq subsorts(nonterms SS) = none .
  eq subsorts(TP ::= PSFL) = subsorts(TP, PSFL) .
  eq subsorts((none).GramDeclSet) = none .
  eq subsorts(GDS1 GDS2) = subsorts(GDS1) subsorts(GDS2) .

  op subsorts : Type PSFormList -> SubsortDeclSet .
  eq subsorts(TP, just S) = (subsort S < TP .) .
  ceq subsorts(TP, <number>) = (subsort 'Rat < TP .)
   if TP not-in ('Zero ; 'NzNat ; 'Nat ;
                 'NzInt ; 'Int ;
                 'PosRat ; 'NzRat ; 'Rat) .
  ceq subsorts(TP, <string>) = (subsort 'String < TP .)
   if TP not-in ('Char ; 'String) .
  eq subsorts(TP, PSF) = none [owise] .
  eq subsorts(TP, PSFL1 | PSFL2) = subsorts(TP, PSFL1) subsorts(TP, PSFL2) .

  op ops : GramDeclSet -> OpDeclSet .
  eq ops(nonterms SS) = none .
  eq ops(TP ::= PSFL) = ops(TP, PSFL) .
  eq ops((none).GramDeclSet) = none .
  eq ops(GDS1 GDS2) = ops(GDS1) ops(GDS2) .

  op ops : Type PSFormList -> OpDeclSet .
  eq ops(TP, just S) = none .
  eq ops(TP, token TS [BAtS])
   = (op qid(TS) : 'Qid -> TP [special(
          id-hook('Bubble, '1 '1)
          if excluded-specified(BAtS)
          then id-hook('Exclude, excluded-tokens(BAtS))
          else nil fi
          op-hook('qidSymbol, '<Qids>, nil, 'Qid))] .) .
  eq ops(TP, bubble BS [BAtS])
   = (op qid(BS) : 'QidList -> TP [special(
          id-hook('Bubble, min-tokens(BAtS) max-tokens(BAtS)
            if balanced-parentheses(BAtS)
            then '`( '`)
            else nil fi)
          if excluded-specified(BAtS)
          then id-hook('Exclude, excluded-tokens(BAtS))
          else nil fi
          op-hook('qidSymbol, '<Qids>, nil, 'Qid)
          op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList))] .) .
  eq ops(TP, <number>) = none .
  eq ops(TP, <string>) = none .
  eq ops(TP, OS : A [AtS]) = (op qid(OS) : A -> TP [AtS] .) .
  eq ops(TP, PSFL1 | PSFL2) = ops(TP, PSFL1) ops(TP, PSFL2) .

  op min-tokens : BblAttrSet -> Qid .
  ceq min-tokens(min-tokens(N) BAtS) = qid(N)
   if min-tokens-specified(BAtS) = false .
  eq min-tokens(BAtS) = '1 [owise] .

  op min-tokens-specified : BblAttrSet -> Bool .
  eq min-tokens-specified(min-tokens(N) BAtS) = true .
  eq min-tokens-specified(BAtS) = false [owise] .

  op max-tokens : BblAttrSet -> Qid .
  ceq max-tokens(max-tokens(N) BAtS) = qid(N)
   if max-tokens-specified(BAtS) = false .
  eq max-tokens(BAtS) = '-1 [owise] .

  op max-tokens-specified : BblAttrSet -> Bool .
  eq max-tokens-specified(max-tokens(N) BAtS) = true .
  eq max-tokens-specified(BAtS) = false [owise] .

  op balanced-parentheses : BblAttrSet -> Bool .
  eq balanced-parentheses(balanced-parentheses BAtS) = true .
  eq balanced-parentheses(BAtS) = false [owise] .

  op excluded-tokens : BblAttrSet -> QidList .
  ceq excluded-tokens(exclude(SL) BAtS) = qid-list(SL)
   if excluded-specified(BAtS) = false .
  eq excluded-tokens(BAtS) = nil [owise] .

  op excluded-specified : BblAttrSet -> Bool .
  eq excluded-specified(exclude(SL) BAtS) = true .
  eq excluded-specified(BAtS) = false [owise] .

  *** annotations for predefined data types  - - - - - - - - - - - - - - - - - -
  op <number> : -> QidSet .
  eq <number> = 'Zero ; 'NzNat ; 'Nat ;
                'NzInt ; 'Int ;
                'PosRat ; 'NzRat ; 'Rat .

  op <string> : -> QidSet .
  eq <string> = 'Char ; 'String .

  *** attributes of predefined operations  - - - - - - - - - - - - - - - - - - -
  op successor-attributes : -> AttrSet .
  eq successor-attributes
   = iter ctor
     special(id-hook('SuccSymbol, nil)
             term-hook('zeroTerm, '0.Zero)) .

  op negation-attributes : -> AttrSet .
  eq negation-attributes
   = special(id-hook('MinusSymbol, nil)
             op-hook('succSymbol, 's_, 'Nat, 'NzNat)
             op-hook('minusSymbol, '-_, 'NzNat, 'NzInt)) .

  op division-attributes : -> AttrSet .
  eq division-attributes
   = ctor prec(31) gather('E 'e)
     special(id-hook('DivisionSymbol, nil)
             op-hook('succSymbol, 's_, 'Nat, 'NzNat)
             op-hook('minusSymbol, '-_, 'NzNat, 'NzInt)) .

  *** bubble constructors  - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op bubble-ctors : Grammar -> QidSet .
  eq bubble-ctors(grammar QI is GDS endgr) = bubble-ctors(GDS) .

  op bubble-ctors : GramDeclSet -> QidSet .
  eq bubble-ctors(nonterms SS) = none .
  eq bubble-ctors(TP ::= PSFL) = bubble-ctors(PSFL) .
  eq bubble-ctors((none).GramDeclSet) = none .
  eq bubble-ctors(GDS1 GDS2) = bubble-ctors(GDS1) ; bubble-ctors(GDS2) .

  op bubble-ctors : PSFormList -> QidSet .
  eq bubble-ctors(token TS [BAtS]) = qid(TS) .
  eq bubble-ctors(bubble BS [BAtS]) = qid(BS) .
  eq bubble-ctors(PSF) = none [owise] .
  eq bubble-ctors(PSFL1 | PSFL2) = bubble-ctors(PSFL1) ; bubble-ctors(PSFL2) .

  *** productions  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op pr-rule : OpDecl -> GramDecl .
  eq pr-rule(op QI : A -> TP [AtS] .)
   = TP ::= string(QI) : A [AtS] .

  op pr-rules : OpDeclSet -> GramDeclSet .
  eq pr-rules(op QI : A -> TP [AtS] . ODS)
   = pr-rule(op QI : A -> TP [AtS] .) pr-rules(ODS) .
  eq pr-rules(ODS) = none [owise] .

  *** least-sort (of a given term)  - - - - - - - - - - - - - - - - - - - - - --
  op least-sort : Grammar Term ~> Type .
  eq least-sort(G, T) = leastSort(fmod(G), T) .

  op least-sorts : Grammar TermList -> TypeList .
  eq least-sorts(G, empty) = nil .
  eq least-sorts(G, (T, TL)) = least-sort(G, T) least-sorts(G, TL).

  *** symbols (with a given arity)  - - - - - - - - - - - - - - - - - - - - - --
  op symbols : Grammar TypeList -> QidSet .
  eq symbols(grammar QI is GDS endgr, A) = $symbols(ops(GDS), A) .

  op $symbols : OpDeclSet TypeList -> QidSet .
  eq $symbols(op QI : A -> TP [AtS] . ODS, A) = QI ; $symbols(ODS, A) .
  eq $symbols(ODS, A) = none [owise] .
endfm

********************************************************************************
