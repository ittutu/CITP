***( SpeX/SAP

  This file is part of SAP, a Syntactic Analysis & Printing library
  for Maude 3 based on REPL.

  Copyright : (C) 2020-2022 Simion Stoilow Institute of Mathematics
              of the Romanian Academy (IMAR)
  License   : GNU General Public License v2.0 or later (GPL-2.0-or-later)
  Author    : Ionut Tutu <Ionut.Tutu@imar.ro>

)

sload ./SAP.maude

********************************************************************************

fmod PRINTING/COMPAT is
  protecting ATERM .

  var M : Module .
  var VS : VariableSet .
  var @T : ATerm .
  var T : Term .

  *** print term  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op print`term_given(_&_) : Term Module VariableSet ~> QidList .
  eq print term T given (M & VS)
   = metaPrettyPrint(M, VS, T, mixfix format number rat) .

  op print`term_given(_&_) : ATerm Module VariableSet ~> QidList .
  eq print term @T given (M & VS)
   = print term plain-term(@T) given (M & VS) .

  *** list term (unformatted)  - - - - - - - - - - - - - - - - - - - - - - - - -
  op list`term_given(_&_) : Term Module VariableSet ~> QidList .
  eq list term T given (M & VS)
   = metaPrettyPrint(M, VS, T, mixfix number rat) .

  op list`term_given(_&_) : ATerm Module VariableSet ~> QidList .
  eq list term @T given (M & VS)
   = list term plain-term(@T) given (M & VS) .
endfm

********************************************************************************

fmod SCANNING*/COMPAT { PEF :: PARSING-ERROR-FORMATTING } is
  protecting PARSING-OUTCOME .
  protecting SAP/WARNING-ARGS .
  protecting PRINTING/COMPAT .

  var  M : Module .
  var  VS : VariableSet .
  var  QIL : QidList .
  var  TP? : Type? .
  var  N : Nat .
  vars RP RP1 RP2 : ResultPair .
  var  RP? : ResultPair? .
  var  QI : Qid .
  var  T : Term .
  var  TQ : TermQid .
  var  TL : TermList .
  var  NTL : NeTermList .

  *** scan input  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op scan`input(_:_)given(_&_) : QidList Type? Module
    VariableSet ~> ParsingOutcome
    [format (d s s d s s d s s d s s d d)] .
  eq scan input (QIL : TP?) given (M & VS)
   = $scan-input(QIL, metaParse(M, VS, QIL, TP?), M, VS) .

  op $scan-input : QidList ResultPair? Module VariableSet ~> ParsingOutcome .
  eq $scan-input(QIL, RP, M, VS)
   = successful-parsing(annotate(getTerm(RP), M)) .
  eq $scan-input(QIL, noParse(N), M, VS)
   = if N == size(QIL)
     then incomplete input
     else parsing-error(
        unexpected-token(get-qid(QIL, N, 'get-qid-error)),
        (at take(s N, QIL), include context)) fi .
  eq $scan-input(QIL, ambiguity(RP1, RP2), M, VS)
   = parsing-error(
      ambiguous-input(
        mksord(getType(RP1)), print term getTerm(RP1) given (M & VS),
        mksord(getType(RP2)), print term getTerm(RP2) given (M & VS))) .
  eq $scan-input(QIL, RP?, M, VS)
   = parsing-error(unexpected-scanning-error) [owise] .
endfm

*** ----------------------------------------------------------------------------

fmod SCANNING/COMPAT is
  protecting SCANNING*/COMPAT { Basic-Parsing-Errors } .
endfm

********************************************************************************

fmod PARSING*/COMPAT { PTF :: PRINT-TERM-FORMATTING,
    PEF :: PARSING-ERROR-FORMATTING } is
  protecting SCANNING*/COMPAT {PEF} .
  protecting ANALYSIS-OUTCOME* { PTF, PEF } .

  var QIL : QidList .
  var TP? : Type? .
  var M : Module .
  var @T : ATerm .
  var T : Term .
  var VS : VariableSet .

  *** decode input given a module and a set of variables  - - - - - - - - - - --
  op decode`input(_:_)given(_&_) : QidList Type? Module
    VariableSet ~> AnalysisOutcome
    [format (d s s d s s d s s d s s d d)] .
  eq decode input (QIL : TP?) given (M & VS)
   = just (scan input (QIL : TP?) given (M & VS)) on QIL .

  *** indexing args  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op at`term_given(_&_) : [Term] Module VariableSet -> WarningArg .
  eq at term T given (M & VS) =  at (list term T given (M & VS)) .

  op at`term_given(_&_) : [ATerm] Module VariableSet -> WarningArg .
  eq at term @T given (M & VS) =  at term plain-term(@T) given (M & VS) .
endfm

*** ----------------------------------------------------------------------------

fmod PARSING/COMPAT is
  protecting PARSING*/COMPAT { Unwrap, Basic-Parsing-Errors } .
endfm

********************************************************************************
