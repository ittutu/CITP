***( SpeX/CommonLibs

  This file is part of CommonLibs (CL), a suite of Maude 3 libraries
  that extend the predefined data modules from the standard prelude.

  Copyright : (C) 2020, 2021 Simion Stoilow Institute of Mathematics
              of the Romanian Academy (IMAR)
  License   : GNU General Public License v2.0 or later (GPL-2.0-or-later)
  Author    : Ionut Tutu <Ionut.Tutu@imar.ro>

)

********************************************************************************

fmod DEFINED { X :: TRIV } is
  var X : X$Elt .
  var X? : [X$Elt] .

  op defined : [X$Elt] -> Bool .
  eq defined(X) = true .
  eq defined(X?) = false [owise] .

  op undefined : -> [X$Elt] [ctor] .
endfm

*** ----------------------------------------------------------------------------

fmod DICTIONARY { KEY :: TRIV, VAL :: TRIV } is
  protecting DEFINED { VAL } .

  *** Dict{KEY,VAL}  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  sorts KeyValuePair{KEY,VAL} Dict{KEY,VAL} .
  subsort KeyValuePair{KEY,VAL} < Dict{KEY,VAL} .

  op _:_ : KEY$Elt VAL$Elt -> KeyValuePair{KEY,VAL} [ctor] .
  op empty : -> Dict{KEY,VAL} [ctor] .
  op _,_ : Dict{KEY,VAL} Dict{KEY,VAL} -> Dict{KEY,VAL}
    [ctor assoc comm id: empty prec 121 format (d r os d)] .

  sort Modifier{KEY,VAL} .
  op subject : Modifier{KEY,VAL} -> KEY$Elt .
  op __ : Modifier{KEY,VAL} VAL$Elt -> VAL$Elt .

  *** - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  var  K : KEY$Elt .
  vars V V' : VAL$Elt .
  var  V? : [VAL$Elt] .
  var  D : Dict{KEY,VAL} .
  var  M : Modifier{KEY,VAL} .

  *** lookup  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op lookup : KEY$Elt Dict{KEY,VAL} -> VAL$Elt .
  eq lookup(K, (K : V, D)) = if defined(lookup(K, D)) then undefined else V fi .
  eq lookup(K, D) = undefined [owise] .

  op _[_] : Dict{KEY,VAL} KEY$Elt -> [VAL$Elt] [prec 23] .
  eq D[K] = lookup(K, D) .

  *** insert  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op insert : KEY$Elt VAL$Elt Dict{KEY,VAL} -> Dict{KEY,VAL} .
  eq insert(K, V, (K : V', D))
   = if defined(D[K]) then insert(K, V, D) else K : V, D fi .
  eq insert(K, V, D) = K : V, D [owise] .

  op insert? : KEY$Elt [VAL$Elt] Dict{KEY,VAL} -> Dict{KEY,VAL} .
  eq insert?(K, V, D) = insert(K, V, D) .
  eq insert?(K, V?, D) = D [owise] .

  op _[_:=_] : Dict{KEY,VAL} KEY$Elt [VAL$Elt] -> Dict{KEY,VAL} [prec 23] .
  eq D[K := V?] = insert?(K, V?, D) .

  *** add  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op add : KEY$Elt VAL$Elt Dict{KEY,VAL} -> Dict{KEY,VAL} .
  eq add(K, V, D) = if defined(lookup(K, D)) then D else insert(K, V, D) fi .

  op _+[_:_] : Dict{KEY,VAL} KEY$Elt VAL$Elt -> Dict{KEY,VAL} [prec 23] .
  eq D + [K : V] = add(K, V, D) .

  *** apply modifier  - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op apply : Modifier{KEY,VAL} Dict{KEY,VAL} -> Dict{KEY,VAL} .
  ceq apply(M, D) = insert?(K, M lookup(K, D), D) if K := subject(M) .
  eq apply(M, D) = D [owise] .

  op _>>=_ : Dict{KEY,VAL} Modifier{KEY,VAL} -> Dict{KEY,VAL} [prec 23] .
  eq D >>= M = apply(M, D) .

  *** delete  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op delete : KEY$Elt Dict{KEY,VAL} -> Dict{KEY,VAL} .
  eq delete(K, (K : V, D)) = delete(K, D) .
  eq delete(K, D) = D [owise] .

  op _\_ : Dict{KEY,VAL} KEY$Elt -> Dict{KEY,VAL} [prec 23] .
  eq D \ K = delete(K, D) .
endfm

********************************************************************************
