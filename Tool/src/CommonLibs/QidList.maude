***( SpeX/CommonLibs

  This file is part of CommonLibs (CL), a suite of Maude 3 libraries
  that extend the predefined data modules from the standard prelude.

  Copyright : (C) 2020-2022 Simion Stoilow Institute of Mathematics
              of the Romanian Academy (IMAR)
  License   : GNU General Public License v2.0 or later (GPL-2.0-or-later)
  Author    : Ionut Tutu <Ionut.Tutu@imar.ro>

)

sload ./Num.maude

********************************************************************************

fmod QID-LIST/OPS is
  protecting QID-LIST .
  protecting FIND-RESULT .

  vars QI QI' : Qid .
  vars QIL QIL1 QIL2 RL P S O C : QidList .
  vars N K : Nat .

  *** get-qid  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op get-qid : QidList Nat Qid -> Qid .
  eq get-qid(nil, N, QI') = QI' .
  eq get-qid(QI QIL, 0, QI') = QI .
  eq get-qid(QI QIL, s N, QI') = get-qid(QIL, N, QI') .

  *** remove  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op remove : QidList QidList -> QidList .
  eq remove(RL, nil) = nil .
  eq remove(RL, QI QIL)
   = if occurs(QI, RL) then remove(RL, QIL) else QI remove(RL, QIL) fi .

  *** take  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op take : Nat QidList -> QidList .
  eq take(0, QIL) = nil .
  eq take(N, nil) = nil .
  eq take(s N, QI QIL) = QI take(N, QIL) .

  *** drop  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op drop : Nat QidList -> QidList .
  eq drop(0, QIL) = QIL .
  eq drop(N, nil) = nil .
  eq drop(s N, QI QIL) = drop(N, QIL) .

  *** find  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op find : QidList QidList -> FindResult .
  eq find(QIL, nil) = 0 .
  eq find(QIL1 P QI QIL2, P QI) = min(size(QIL1), find(QIL1 P, P QI)) .
  eq find(QIL, P QI) = notFound [owise] .

  *** string  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op string : QidList -> String [ditto] .
  eq string(nil) = "" .
  eq string(QI QIL) = string(QI) + string(QIL) .

  *** qid  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op qid : QidList -> Qid .
  eq qid(QIL) = qid(string(QIL)) .

  *** intersperse  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op intersperse : QidList QidList -> QidList .
  eq intersperse(S, QI QI' QIL) = QI S intersperse(S, QI' QIL) .
  eq intersperse(S, QIL) = QIL [owise] .

  *** first-line  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op first-line : QidList -> QidList .
  eq first-line(nil) = nil .
  eq first-line(QI QIL)
   = if QI == '\n then nil else QI first-line(QIL) fi .

  *** last-line  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  op last-line : QidList -> QidList .
  eq last-line(nil) = nil .
  eq last-line(QIL QI)
   = if QI == '\n then nil else last-line(QIL) QI fi .

  op last-lines : QidList -> QidList .
  eq last-lines(nil) = nil .
  eq last-lines(QI QIL)
   = if QI == '\n then QIL else last-lines(QIL) fi .

  *** wrapp & unwrap  - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op wrap : QidList QidList QidList -> QidList .
  eq wrap(QIL, O, C) = O QIL C .

  op unwrap : QidList QidList QidList -> QidList .
  eq unwrap(O QIL C, O, C) = QIL .
  eq unwrap(QIL, O, C) = QIL [owise] .
endfm

********************************************************************************
