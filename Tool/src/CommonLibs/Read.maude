***( SpeX/CommonLibs

  This file is part of CommonLibs (CL), a suite of Maude 3 libraries
  that extend the predefined data modules from the standard prelude.

  Copyright : (C) 2021 Simion Stoilow Institute of Mathematics of the
              Romanian Academy (IMAR)
  License   : GNU General Public License v2.0 or later (GPL-2.0-or-later)
  Author    : Ionut Tutu <Ionut.Tutu@imar.ro>

)

********************************************************************************

fmod BR-LIST { X :: TRIV } is
  sorts NeBrList{X} BrList{X} .
  subsort NeBrList{X} < BrList{X} .
  op {_} : X$Elt -> NeBrList{X} [ctor] .
  op nil : -> BrList{X} [ctor] .
  op __ : BrList{X} BrList{X} -> BrList{X}
    [ctor assoc id: nil format (d ni d)] .
  op __ : NeBrList{X} BrList{X} -> NeBrList{X} [ctor ditto] .
  op __ : BrList{X} NeBrList{X} -> NeBrList{X} [ctor ditto] .
endfm

********************************************************************************

fmod READ { X :: TRIV } is
  protecting BR-LIST { X } .
  protecting META-LEVEL .

  var T : Term .
  var TL : TermList .

  *** undefined reading result  - - - - - - - - - - - - - - - - - - - - - - - --
  op undef-read : -> [X$Elt] [ctor] .

  *** read  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
  op read-elt : Term ~> X$Elt .
  eq read-elt(T) = downTerm(T, (undef-read).[X$Elt]) .

  op read-list : TermList -> BrList{X} .
  eq read-list(empty) = nil .
  eq read-list((T, TL)) = {read-elt(T)} read-list(TL) .
endfm

********************************************************************************
