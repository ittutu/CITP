in citp

fmod TEST is
  sorts Elt .
  ops a a1 a2 b b1 b2 c c1 c2 d d1 d2 g1 g2 f1 f2 e e1 e2 i j : -> Elt .
  ops g h : Elt -> Elt .
  op f : Elt Elt -> Elt .
  var X : Elt .
 ceq f(a,X) = f(b,X) if g(X) = X /\ h(X) = X [metadata "lm1"].
 ceq g(c) = c if g(d) = g(e) [metadata "lm2"].
 ceq h(c) = c if g(i) = g(j) [metadata "lm3"].
 eq  d = e [metadata "lm4"].
 eq  g(i) = g(j) [metadata "lm5"].


 ceq a1 = a2 if b1 = b2 /\ c1 = c2 [metadata "axa"] .
 ceq b1 = b2 if d1 = d2 [metadata "axb"].
 ceq c1 = c2 if d1 = d2 [metadata "axc"].
 ceq d1 = d2 if e1 = e2 [metadata "axd"] .
 ceq e1 = e2 if f1 = f2 /\ g1 = g2 [metadata "axe"].
 eq f1 = f2 [metadata "axf"].
 eq g1 = g2 [metadata "axg"].
---
endfm
--- ---------------------------------------------------------------------------------
select #CITP# .
loop init .
--- ---------------------------------------------------------------------------------
(goal TEST |- eq f(a,g(c)) = f(b,h(c)) ;)
(applyEq lm1 to f(a,g(c)) at 0 unbounded 0)
(applyEq lm2 to f(b,g(c)) at 0 unbounded 0)
(applyEq lm3 to f(b,h(c)) at 0 unbounded 0)
(applyEq lm2 to g(g(c)) at 0 unbounded 0)
(applyEq lm2 to h(g(c)) at 0 unbounded 0)
(applyEq lm3 to h(c) at 0 unbounded 0)
(applyEq lm2 to g(c) at 0 unbounded 0)
(applyEq lm4 to g(d) at 0 unbounded 0)
(applyEq lm5 to g(i) at 0 unbounded 0)
--- ---------------------------------------------------------------------------------
eof
--- ---------------------------------------------------------------------------------
*** 1 ***
(goal TEST |-
eq a1 = a2 ;)
*** 2 ***
(applyEq ceq a1 = a2 if b1 = b2 /\ c1 = c2 ; to a1 at 0 unbounded 0)
*** 3 ***
(applyEq axb to b1 at 0 unbounded 0)
*** 4 ***
(applyEq axc to c1 at 0 unbounded 0)
*** 5 ***
(applyEq axd to d1 at 0 unbounded 0)
*** 6 ***
(applyEq axe to e1 at 0 unbounded 0)
*** 7 ***
(applyEq axf to f1 at 0 unbounded 0)
*** 8 ***
(applyEq axg to g1 at 0 unbounded 0)
--- ---------------------------------------------------------------------------------
eof
--- ---------------------------------------------------------------------------------
reduce in #REDUCTION# :
 redFin(1,5,1,upModule('TEST,false), 'a1.Elt).

reduce in #REDUCTION# :
 redFin(1,3,1,upModule('TEST,false), 'f['a.Elt,'c.Elt]).

red in #REDUCTION# :
 redStep(2,1,upModule('TEST,false),
 ceq 'f['a.Elt,'X:Elt] = 'f['b.Elt,'X:Elt] if 'g['X:Elt] = 'X:Elt /\ 'h['X:Elt] = 'X:Elt [none] .,
 'f['a.Elt,'c.Elt]).

red in #REDUCTION# :
 applyEq(< upModule('TEST,false),eq 'f['a.Elt,'c.Elt] = 'f['b.Elt,'c.Elt][none]; >,
 ceq 'f['a.Elt,'X:Elt] = 'f['b.Elt,'X:Elt] if 'g['X:Elt] = 'X:Elt /\ 'h['X:Elt] = 'X:Elt [none];,
 'f['a.Elt,'c.Elt],0,unbounded,0).
--- ---------------------------------------------------------------------------------
--- ---------------------------------------------------------------------------------